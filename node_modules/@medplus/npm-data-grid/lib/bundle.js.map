{"version":3,"file":"bundle.js","sources":["../node_modules/style-inject/dist/style-inject.es.js","../src/style/cell.ts","../src/style/core.ts","../src/style/row.ts","../src/formatters/checkboxFormatter.tsx","../src/DataGridDefaultComponentsProvider.ts","../src/formatters/SelectCellFormatter.tsx","../src/formatters/valueFormatter.tsx","../src/formatters/toggleGroupFormatter.tsx","../src/hooks/useRowSelection.ts","../src/Columns.tsx","../src/utils/colSpanUtils.ts","../src/utils/domUtils.ts","../src/utils/keyboardUtils.ts","../src/utils/selectedCellUtils.ts","../src/utils/styleUtils.ts","../src/utils/renderMeasuringCells.tsx","../src/utils/index.ts","../src/hooks/useCalculatedColumns.ts","../src/hooks/useLayoutEffect.ts","../src/hooks/useFocusRef.ts","../src/hooks/useGridDimensions.ts","../src/hooks/useLatestFunc.ts","../src/hooks/useRovingCellRef.ts","../src/hooks/useViewportColumns.ts","../src/hooks/useViewportRows.ts","../src/hooks/useColumnWidths.ts","../src/ScrollToCell.tsx","../src/headerRenderer.tsx","../src/HeaderCell.tsx","../src/HeaderRow.tsx","../src/Cell.tsx","../src/utils/Helpers.ts","../src/Row.tsx","../src/GroupCell.tsx","../src/GroupRow.tsx","../src/SummaryCell.tsx","../src/SummaryRow.tsx","../src/EditCell.tsx","../src/DragHandle.tsx","../src/sortIcon.tsx","../src/hooks/useRovingTabIndex.ts","../src/GroupedColumnHeaderCell.tsx","../src/GroupedColumnHeaderRow.tsx","../src/DataGrid.tsx","../src/editors/textEditor.tsx"],"sourcesContent":["function styleInject(css, ref) {\n  if ( ref === void 0 ) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === 'undefined') { return; }\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nexport default styleInject;\n","import { css } from '@linaria/core';\n\nexport const cell = css`\n  /*\n  Cannot use these because of a Chromium bug:\n  https://bugs.chromium.org/p/chromium/issues/detail?id=1326946\n  once this is fixed we can also remove \"position: relative:\"\n  contain: strict;\n  contain: size layout style paint;\n  */\n  position: relative; /* needed for absolute positioning to work */\n  contain: style;\n  padding-block: 0;\n  padding-inline: 8px;\n  border-inline-end: 1px solid var(--rdg-border-color);\n  border-block-end: 1px solid var(--rdg-border-color);\n  height: var(--rdg-row-height);\n  background-color: inherit;\n  white-space: nowrap;\n  overflow: hidden;\n  overflow: clip;\n  text-overflow: ellipsis;\n  outline: none;\n  &[aria-selected='true'] {\n    outline: 2px solid var(--rdg-selection-color);\n    outline-offset: -2px;\n  }\n`;\n\nexport const cellClassname = `rdg-cell ${cell}`;\n\nexport const autosizeColumnsClassname = css`\n  .${cell} {\n    contain: style;\n  }\n`;\n\nexport const cellFrozen = css`\n  position: sticky;\n  /* Should have a higher value than 0 to show up above unfrozen cells */\n  z-index: 1;\n`;\n\nexport const cellFrozenClassname = `rdg-cell-frozen ${cellFrozen}`;\n\nexport const cellFrozenLast = css`\n  box-shadow: calc(2px * var(--rdg-sign)) 0 5px 0px rgba(136, 136, 136, 0.3);\n`;\n\nexport const rightCellFrozenFirst = css`\n  box-shadow: calc(-2px * var(--rdg-sign)) 0 5px 0px rgba(136, 136, 136, 0.3);\n`;\n\nexport const cellFrozenLastClassname = `rdg-cell-frozen-last ${cellFrozenLast}`;\n\n\nexport const rightCellFrozenFirstClassname = `rdg-cell-right-frozen-first ${rightCellFrozenFirst}`\n","import { css } from '@linaria/core';\nimport { row } from './row';\n\nconst lightTheme = `\n  --rdg-color: #000;\n  --rdg-border-color: #ddd;\n  --rdg-summary-border-color: #aaa;\n  --rdg-background-color: hsl(0deg 0% 100%);\n  --rdg-header-background-color: hsl(0deg 0% 97.5%);\n  --rdg-row-hover-background-color: hsl(0deg 0% 96%);\n  --rdg-row-selected-background-color: hsl(207deg 76% 92%);\n  --row-selected-hover-background-color: hsl(207deg 76% 88%);\n\n  --rdg-checkbox-color: hsl(207deg 100% 29%);\n  --rdg-checkbox-focus-color: hsl(207deg 100% 69%);\n  --rdg-checkbox-disabled-border-color: #ccc;\n  --rdg-checkbox-disabled-background-color: #ddd;\n`;\n\nconst darkTheme = `\n  --rdg-color: #ddd;\n  --rdg-border-color: #444;\n  --rdg-summary-border-color: #555;\n  --rdg-background-color: hsl(0deg 0% 13%);\n  --rdg-header-background-color: hsl(0deg 0% 10.5%);\n  --rdg-row-hover-background-color: hsl(0deg 0% 9%);\n  --rdg-row-selected-background-color: hsl(207deg 76% 42%);\n  --row-selected-hover-background-color: hsl(207deg 76% 38%);\n\n  --rdg-checkbox-color: hsl(207deg 100% 79%);\n  --rdg-checkbox-focus-color: hsl(207deg 100% 89%);\n  --rdg-checkbox-disabled-border-color: #000;\n  --rdg-checkbox-disabled-background-color: #333;\n`;\n\nconst root = css`\n  ${lightTheme}\n  --rdg-selection-color: #66afe9;\n  --rdg-font-size: 14px;\n\n  display: grid;\n  align-content: start;\n\n  color-scheme: var(--rdg-color-scheme, light dark);\n\n  /* https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Positioning/Understanding_z_index/The_stacking_context */\n  /* We set a stacking context so internal elements don't render on top of external components. */\n  contain: strict;\n  contain: size layout style paint;\n  content-visibility: auto;\n  block-size: 350px;\n  border: 1px solid var(--rdg-border-color);\n  box-sizing: border-box;\n  overflow: auto;\n  background-color: var(--rdg-background-color);\n  color: var(--rdg-color);\n  font-size: var(--rdg-font-size);\n\n  /* set stacking context in safari */\n  @supports not (contain: strict) {\n    position: relative;\n    z-index: 0;\n  }\n\n  *,\n  *::before,\n  *::after {\n    box-sizing: inherit;\n  }\n\n  /* needed on Firefox */\n  &::before {\n    grid-column: 1/-1;\n    grid-row: 1/-1;\n  }\n\n  &.rdg-dark {\n    --rdg-color-scheme: dark;\n    ${darkTheme}\n  }\n\n  &.rdg-light {\n    --rdg-color-scheme: light;\n  }\n\n  @media (prefers-color-scheme: dark) {\n    &:not(.rdg-light) {\n      ${darkTheme}\n    }\n  }\n`;\n\nexport const rootClassname = `rdg ${root}`;\n\nconst viewportDragging = css`\n  &.${row} {\n    cursor: move;\n  }\n`;\n\nexport const viewportDraggingClassname = `rdg-viewport-dragging ${viewportDragging}`;\n\nexport const focusSinkClassname = css`\n  grid-column: 1/-1;\n  pointer-events: none;\n  /* Should have a higher value than 3 to show up above header row */\n  z-index: 4;\n`;\n","import { css } from '@linaria/core';\n\nexport const row = css`\n  display: contents;\n  line-height: var(--rdg-row-height);\n  background-color: var(--rdg-background-color);\n  &:hover {\n    background-color: var(--rdg-row-hover-background-color);\n  }\n  &[aria-selected='true'] {\n    background-color: var(--rdg-row-selected-background-color);\n    &:hover {\n      background-color: var(--row-selected-hover-background-color);\n    }\n  }\n`;\n\nexport const rowClassname = `rdg-row ${row}`;\n\nexport const rowSelected = css`\n  outline: 2px solid var(--rdg-selection-color);\n  outline-offset: -2px;\n`;\n\nexport const rowSelectedClassname = `rdg-row-selected`;\n\nexport const rowSelectedWithFrozenCell = css`\n  &::before {\n    content: '';\n    display: inline-block;\n    height: 100%;\n    position: sticky;\n    inset-inline-start: 0;\n    border-inline-start: 2px solid var(--rdg-selection-color);\n  }\n`;\n","import clsx from 'clsx';\nimport { css } from '@linaria/core';\n\nimport type { CheckboxFormatterProps } from '../types';\n\nconst checkboxLabel = css`\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  position: absolute;\n  inset: 0;\n  margin-inline-end: 1px; /* align checkbox in row group cell */\n`;\n\nconst checkboxLabelClassname = `rdg-checkbox-label ${checkboxLabel}`;\n\nconst checkboxInput = css`\n  all: unset;\n`;\n\nconst checkboxInputClassname = `rdg-checkbox-input ${checkboxInput}`;\n\nconst checkbox = css`\n  content: '';\n  inline-size: 20px;\n  block-size: 20px;\n  border: 2px solid var(--rdg-border-color);\n  background-color: var(--rdg-background-color);\n  .${checkboxInput}:checked + & {\n    background-color: var(--rdg-checkbox-color);\n    outline: 4px solid var(--rdg-background-color);\n    outline-offset: -6px;\n  }\n  .${checkboxInput}:focus + & {\n    border-color: var(--rdg-checkbox-focus-color);\n  }\n`;\n\nconst checkboxClassname = `rdg-checkbox ${checkbox}`;\n\nconst checkboxLabelDisabled = css`\n  cursor: default;\n  .${checkbox} {\n    border-color: var(--rdg-checkbox-disabled-border-color);\n    background-color: var(--rdg-checkbox-disabled-background-color);\n  }\n`;\n\nconst checkboxLabelDisabledClassname = `rdg-checkbox-label-disabled ${checkboxLabelDisabled}`;\n\nexport function checkboxFormatter({ onChange, ...props }: CheckboxFormatterProps) {\n\n  function handleChange(e: React.ChangeEvent<HTMLInputElement>) {\n    onChange(e.target.checked, (e.nativeEvent as MouseEvent).shiftKey);\n  }\n\n  return (\n    <label\n      className={clsx(checkboxLabelClassname, {\n        [checkboxLabelDisabledClassname]: props.disabled\n      })}\n    >\n      <input\n        type=\"checkbox\"\n        {...props}\n        className={checkboxInputClassname}\n        onChange={handleChange}\n      />\n      <div className={checkboxClassname} />\n    </label>\n  );\n}\n","import { createContext, useContext } from 'react';\n\nimport type { Renderers, Maybe } from './types';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst DataGridDefaultComponentsContext = createContext<Maybe<Renderers<any, any>>>(undefined);\n\nexport const DataGridDefaultComponentsProvider = DataGridDefaultComponentsContext.Provider;\n\nexport function useDefaultComponents<R, SR>(): Maybe<Renderers<R, SR>> {\n  return useContext(DataGridDefaultComponentsContext);\n}\n","import { useDefaultComponents } from '../DataGridDefaultComponentsProvider';\nimport type { CheckboxFormatterProps } from '../types';\n\ntype SharedInputProps = Pick<CheckboxFormatterProps, 'disabled' | 'aria-label' | 'aria-labelledby'>;\n\ninterface SelectCellFormatterProps extends SharedInputProps {\n  isCellSelected: boolean;\n  value: boolean;\n  onChange: (value: boolean, isShiftClick: boolean) => void;\n}\n\nexport function SelectCellFormatter({\n  value,\n  isCellSelected,\n  disabled,\n  onChange,\n  'aria-label': ariaLabel,\n  'aria-labelledby': ariaLabelledBy\n}: SelectCellFormatterProps) {\n  const checkboxFormatter = useDefaultComponents()!.checkboxFormatter!;\n\n  return (\n    <>\n      {checkboxFormatter({\n        'aria-label': ariaLabel,\n        'aria-labelledby': ariaLabelledBy,\n        tabIndex: isCellSelected ? 0 : -1,\n        disabled,\n        checked: value,\n        onChange\n      })}\n    </>\n  );\n}\n","import type { FormatterProps } from '../types';\n\nexport function valueFormatter<R, SR>(props: FormatterProps<R, SR>) {\n  try {\n      return <>{props.row[props.column.key as keyof R] ?? props.column.defaultColumnValue ?? \"\"}</>;\n  } catch {\n    return null;\n  }\n}\n","import { css } from '@linaria/core';\nimport type { GroupFormatterProps } from '../types';\n\nconst groupCellContent = css`\n  outline: none;\n`;\n\nconst groupCellContentClassname = `rdg-group-cell-content ${groupCellContent}`;\n\nconst caret = css`\n  margin-inline-start: 4px;\n  stroke: currentColor;\n  stroke-width: 1.5px;\n  fill: transparent;\n  vertical-align: middle;\n\n  > path {\n    transition: d 0.1s;\n  }\n`;\n\nconst caretClassname = `rdg-caret ${caret}`;\n\nexport function toggleGroupFormatter<R, SR>(props: GroupFormatterProps<R, SR>) {\n  return <ToggleGroup {...props} />;\n}\n\nexport function ToggleGroup<R, SR>({\n  groupKey,\n  isExpanded,\n  isCellSelected,\n  toggleGroup\n}: GroupFormatterProps<R, SR>) {\n\n  function handleKeyDown({ key }: React.KeyboardEvent<HTMLSpanElement>) {\n    if (key === 'Enter') {\n      toggleGroup();\n    }\n  }\n\n  const d = isExpanded ?  'M1 7 L 7 1 L 13 7': 'M1 1 L 7 7 L 13 1';\n\n  return (\n    <span\n      className={groupCellContentClassname}\n      tabIndex={isCellSelected ? 0 : -1}\n      onKeyDown={handleKeyDown}\n    >\n      {groupKey as string}\n      <svg viewBox=\"0 0 14 8\" width=\"14\" height=\"8\" className={caretClassname} aria-hidden>\n        <path d={d} />\n      </svg>\n    </span>\n  );\n}\n","import { createContext, useContext } from 'react';\nimport type { SelectRowEvent } from '../types';\n\nconst RowSelectionContext = createContext<boolean | undefined>(undefined);\n\nexport const RowSelectionProvider = RowSelectionContext.Provider;\n\nconst RowSelectionChangeContext = createContext<\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  ((selectRowEvent: SelectRowEvent<any>) => void) | undefined\n>(undefined);\n\nexport const RowSelectionChangeProvider = RowSelectionChangeContext.Provider;\n\nexport function useRowSelection<R>(): [boolean, (selectRowEvent: SelectRowEvent<R>) => void] {\n  const rowSelectionContext = useContext(RowSelectionContext);\n  const rowSelectionChangeContext = useContext(RowSelectionChangeContext);\n\n  if (rowSelectionContext === undefined || rowSelectionChangeContext === undefined) {\n    throw new Error('useRowSelection must be used within DataGrid cells');\n  }\n\n  return [rowSelectionContext, rowSelectionChangeContext];\n}\n","import { SelectCellFormatter } from './formatters';\nimport { useRowSelection } from './hooks/useRowSelection';\nimport type { Column, FormatterProps, GroupFormatterProps } from './types';\n\nexport const SELECT_COLUMN_KEY = 'select-row';\n\nfunction SelectFormatter(props: FormatterProps<unknown>) {\n  const [isRowSelected, onRowSelectionChange] = useRowSelection();\n\n  return (\n    <SelectCellFormatter\n      aria-label=\"Select\"\n      isCellSelected={props.isCellSelected}\n      value={isRowSelected}\n      onChange={(checked, isShiftClick) => {\n        onRowSelectionChange({ row: props.row, checked, isShiftClick });\n      }}\n    />\n  );\n}\n\nfunction SelectGroupFormatter(props: GroupFormatterProps<unknown>) {\n  const [isRowSelected, onRowSelectionChange] = useRowSelection();\n\n  return (\n    <SelectCellFormatter\n      aria-label=\"Select Group\"\n      isCellSelected={props.isCellSelected}\n      value={isRowSelected}\n      onChange={(checked) => {\n        onRowSelectionChange({ row: props.row, checked, isShiftClick: false });\n      }}\n    />\n  );\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const SelectColumn: Column<any, any> = {\n  key: SELECT_COLUMN_KEY,\n  name: '',\n  width: 35,\n  minWidth: 35,\n  maxWidth: 35,\n  resizable: false,\n  sortable: false,\n  frozen: true,\n  headerRenderer(props) {\n    return (\n      <SelectCellFormatter\n        aria-label=\"Select All\"\n        isCellSelected={props.isCellSelected}\n        value={props.allRowsSelected}\n        onChange={props.onAllRowsSelectionChange}\n      />\n    );\n  },\n  formatter(props) {\n    return <SelectFormatter {...props} />;\n  },\n  groupFormatter(props) {\n    return <SelectGroupFormatter {...props} />;\n  }\n};\n","import type { CalculatedColumn, ColSpanArgs } from '../types';\n\nexport function getColSpan<R, SR>(\n  column: CalculatedColumn<R, SR>,\n  lastFrozenColumnIndex: number,\n  args: ColSpanArgs<R, SR>\n): number | undefined {\n  const colSpan = typeof column.colSpan === 'function' ? column.colSpan(args) : 1;\n  if (\n    Number.isInteger(colSpan) &&\n    colSpan! > 1 &&\n    // ignore colSpan if it spans over both frozen and regular columns\n\n    // need to consider the frozen columns both left side and right side \n    // should not allow the nonfrozen columns to span over frozen columsn\n    // in frozen columns it not should not spacn more the frozen colummn number on the right side\n    (!column.frozen || column.idx + colSpan! - 1 <= lastFrozenColumnIndex)\n  ) {\n    return colSpan!;\n  }\n  return undefined;\n}\n","import type { Maybe } from '../types';\n\nexport function stopPropagation(event: React.SyntheticEvent) {\n  event.stopPropagation();\n}\n\nexport function scrollIntoView(element: Maybe<Element>) {\n  element?.scrollIntoView({ inline: 'nearest', block: 'nearest' });\n}\n","// https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values\nconst nonInputKeys = new Set([\n  // Special keys\n  'Unidentified',\n  // Modifier keys\n  'Alt',\n  'AltGraph',\n  'CapsLock',\n  'Control',\n  'Fn',\n  'FnLock',\n  'Meta',\n  'NumLock',\n  'ScrollLock',\n  'Shift',\n  // Whitespace keys\n  'Tab',\n  // Navigation keys\n  'ArrowDown',\n  'ArrowLeft',\n  'ArrowRight',\n  'ArrowUp',\n  'End',\n  'Home',\n  'PageDown',\n  'PageUp',\n  // Editing\n  'Insert',\n  // UI keys\n  'ContextMenu',\n  'Escape',\n  'Pause',\n  'Play',\n  // Device keys\n  'PrintScreen',\n  // Function keys\n  'F1',\n  // 'F2', /!\\ specifically allowed, do not edit\n  'F3',\n  'F4',\n  'F5',\n  'F6',\n  'F7',\n  'F8',\n  'F9',\n  'F10',\n  'F11',\n  'F12'\n]);\n\nexport function isCtrlKeyHeldDown(e: React.KeyboardEvent): boolean {\n  return (e.ctrlKey || e.metaKey) && e.key !== 'Control';\n}\n\nexport function isDefaultCellInput(event: React.KeyboardEvent<HTMLDivElement>): boolean {\n  return !nonInputKeys.has(event.key);\n}\n\n/**\n * By default, the following navigation keys are enabled while an editor is open, under specific conditions:\n * - Tab:\n *   - The editor must be an <input>, a <textarea>, or a <select> element.\n *   - The editor element must be the only immediate child of the editor container/a label.\n */\nexport function onEditorNavigation({ key, target }: React.KeyboardEvent<HTMLDivElement>): boolean {\n  if (\n    key === 'Tab') {\n    return true;\n  }\n  return false;\n}\n","import type {\n  CalculatedColumn,\n  CalculatedColumnParent,\n  CellNavigationMode,\n  Maybe,\n  Position,\n  GroupRow\n} from '../types';\nimport { getColSpan } from './colSpanUtils';\n\ninterface IsSelectedCellEditableOpts<R, SR> {\n  selectedPosition: Position;\n  columns: readonly CalculatedColumn<R, SR>[];\n  rows: readonly (R | GroupRow<R>)[];\n  isGroupRow: (row: R | GroupRow<R>) => row is GroupRow<R>;\n}\n\nexport function isSelectedCellEditable<R, SR>({\n  selectedPosition,\n  columns,\n  rows,\n  isGroupRow\n}: IsSelectedCellEditableOpts<R, SR>): boolean {\n  const column = columns[selectedPosition.idx];\n  const row = rows[selectedPosition.rowIdx];\n  return !isGroupRow(row) && isCellEditable(column, row);\n}\n\nexport function isCellEditable<R, SR>(column: CalculatedColumn<R, SR>, row: R): boolean {\n  return (\n    column.editor != null &&\n    !column.rowGroup &&\n    (typeof column.editable === 'function' ? column.editable(row) : column.editable) !== false\n  );\n}\n\ninterface GetNextSelectedCellPositionOpts<R, SR> {\n  moveUp: boolean;\n  moveNext: boolean;\n  cellNavigationMode: CellNavigationMode;\n  columns: readonly CalculatedColumn<R, SR>[];\n  colSpanColumns: readonly CalculatedColumn<R, SR>[];\n  rows: readonly (R | GroupRow<R>)[];\n  topSummaryRows: Maybe<readonly SR[]>;\n  bottomSummaryRows: Maybe<readonly SR[]>;\n  minRowIdx: number;\n  mainHeaderRowIdx: number;\n  maxRowIdx: number;\n  currentPosition: Position;\n  nextPosition: Position;\n  lastFrozenColumnIndex: number;\n  isCellWithinBounds: (position: Position) => boolean;\n  isGroupRow: (row: R | GroupRow<R>) => row is GroupRow<R>;\n}\n\nexport function getSelectedCellColSpan<R, SR>({\n  rows,\n  topSummaryRows,\n  bottomSummaryRows,\n  rowIdx,\n  mainHeaderRowIdx,\n  lastFrozenColumnIndex,\n  column,\n  isGroupRow\n}: Pick<\n  GetNextSelectedCellPositionOpts<R, SR>,\n  'rows' | 'topSummaryRows' | 'bottomSummaryRows' | 'isGroupRow' | 'lastFrozenColumnIndex' | 'mainHeaderRowIdx'\n> & {\n  rowIdx: number;\n  column: CalculatedColumn<R, SR>;\n}) {\n  const topSummaryRowsCount = topSummaryRows?.length ?? 0;\n  if (rowIdx === mainHeaderRowIdx) {\n    return getColSpan(column, lastFrozenColumnIndex, { type: 'HEADER' });\n  }\n\n  if (topSummaryRows &&\n    rowIdx > mainHeaderRowIdx &&\n    rowIdx <= topSummaryRowsCount + mainHeaderRowIdx) {\n    return getColSpan(column, lastFrozenColumnIndex, {\n      type: 'SUMMARY',\n      row: topSummaryRows[rowIdx + topSummaryRowsCount]\n    });\n  }\n\n  if (rowIdx >= 0 && rowIdx < rows.length) {\n    const row = rows[rowIdx];\n    if (!isGroupRow(row)) {\n      return getColSpan(column, lastFrozenColumnIndex, { type: 'ROW', row });\n    }\n    return undefined;\n  }\n\n  if (bottomSummaryRows) {\n    return getColSpan(column, lastFrozenColumnIndex, {\n      type: 'SUMMARY',\n      row: bottomSummaryRows[rowIdx - rows.length]\n    });\n  }\n\n  return undefined;\n}\n\nexport function getNextSelectedCellPosition<R, SR>({\n  moveUp,\n  moveNext,\n  cellNavigationMode,\n  columns,\n  colSpanColumns,\n  rows,\n  topSummaryRows,\n  bottomSummaryRows,\n  minRowIdx,\n  mainHeaderRowIdx,\n  maxRowIdx,\n  currentPosition: { idx: currentIdx, rowIdx: currentRowIdx },\n  nextPosition,\n  lastFrozenColumnIndex,\n  isCellWithinBounds,\n  isGroupRow\n}: GetNextSelectedCellPositionOpts<R, SR>): Position {\n  let { idx: nextIdx, rowIdx: nextRowIdx } = nextPosition;\n  const columnsCount = columns.length;\n\n\n  const setColSpan = (moveNext: boolean) => {\n    if (nextRowIdx >= 0 && nextRowIdx < rows.length) {\n      const row = rows[nextRowIdx];\n      if (isGroupRow(row)) return;\n    }\n    // If a cell within the colspan range is selected then move to the\n    // previous or the next cell depending on the navigation direction\n    for (const column of colSpanColumns) {\n      const colIdx = column.idx;\n      if (colIdx > nextIdx) break;\n      const colSpan = getSelectedCellColSpan({\n        rows,\n        topSummaryRows,\n        bottomSummaryRows,\n        rowIdx: nextRowIdx,\n        mainHeaderRowIdx,\n        lastFrozenColumnIndex,\n        column,\n        isGroupRow\n      });\n\n      if (colSpan && nextIdx > colIdx && nextIdx < colSpan + colIdx) {\n        nextIdx = colIdx + (moveNext ? colSpan : 0);\n        break;\n      }\n    }\n  };\n\n  const getParentRowIdx = (parent: CalculatedColumnParent<R, SR>) => {\n    return parent.level + mainHeaderRowIdx;\n  };\n\n  const setHeaderGroupColAndRowSpan = () => {\n    if (moveNext) {\n      // find the parent at the same row level\n      const nextColumn = columns[nextIdx];\n      let parent = nextColumn.parent;\n      while (parent !== undefined) {\n        const parentRowIdx = getParentRowIdx(parent);\n        if (nextRowIdx === parentRowIdx) {\n          nextIdx = parent.idx + parent.colSpan;\n          break;\n        }\n        parent = parent.parent;\n      }\n    } else if (moveUp) {\n      // find the first reachable parent\n      const nextColumn = columns[nextIdx];\n      let parent = nextColumn.parent;\n      let found = false;\n      while (parent !== undefined) {\n        const parentRowIdx = getParentRowIdx(parent);\n        if (nextRowIdx >= parentRowIdx) {\n          nextIdx = parent.idx;\n          nextRowIdx = parentRowIdx;\n          found = true;\n          break;\n        }\n        parent = parent.parent;\n      }\n\n      // keep the current position if there is no parent matching the new row position\n      if (!found) {\n        nextIdx = currentIdx;\n        nextRowIdx = currentRowIdx;\n      }\n    }\n  };\n\n  if (isCellWithinBounds(nextPosition)) {\n    setColSpan(moveNext);\n\n    if (nextRowIdx < mainHeaderRowIdx) {\n      setHeaderGroupColAndRowSpan();\n    }\n  }\n\n  if (cellNavigationMode !== 'NONE') {\n    const isAfterLastColumn = nextIdx === columnsCount;\n    const isBeforeFirstColumn = nextIdx === -1;\n\n    if (isAfterLastColumn) {\n      if (cellNavigationMode === 'CHANGE_ROW') {\n        const isLastRow = nextRowIdx === maxRowIdx;\n        if (!isLastRow) {\n          nextIdx = 0;\n          nextRowIdx += 1;\n        }\n      } else {\n        nextIdx = 0;\n      }\n    } else if (isBeforeFirstColumn) {\n      if (cellNavigationMode === 'CHANGE_ROW') {\n        const isFirstRow = nextRowIdx === minRowIdx;\n        if (!isFirstRow) {\n          nextRowIdx -= 1;\n          nextIdx = columnsCount - 1;\n        }\n      } else {\n        nextIdx = columnsCount - 1;\n      }\n      setColSpan(false);\n    }\n  }\n\n  if (nextRowIdx < mainHeaderRowIdx) {\n    // Find the last reachable parent for the new rowIdx\n    // This check is needed when navigating to a column\n    // that does not have a parent matching the new rowIdx\n    const nextColumn = columns[nextIdx];\n    let parent = nextColumn.parent;\n    const nextParentRowIdx = nextRowIdx;\n    nextRowIdx = mainHeaderRowIdx;\n    while (parent !== undefined) {\n      const parentRowIdx = getParentRowIdx(parent);\n      if (parentRowIdx >= nextParentRowIdx) {\n        nextRowIdx = parentRowIdx;\n        nextIdx = parent.idx;\n      }\n      parent = parent.parent;\n    }\n  }\n\n  return { idx: nextIdx, rowIdx: nextRowIdx };\n}\n\ninterface CanExitGridOpts {\n  cellNavigationMode: CellNavigationMode;\n  maxColIdx: number;\n  minRowIdx: number;\n  maxRowIdx: number;\n  selectedPosition: Position;\n  shiftKey: boolean;\n}\n\nexport function canExitGrid({\n  cellNavigationMode,\n  maxColIdx,\n  minRowIdx,\n  maxRowIdx,\n  selectedPosition: { rowIdx, idx },\n  shiftKey\n}: CanExitGridOpts): boolean {\n  // When the cellNavigationMode is 'none' or 'changeRow', you can exit the grid if you're at the first or last cell of the grid\n  // When the cellNavigationMode is 'loopOverRow', there is no logical exit point so you can't exit the grid\n  if (cellNavigationMode === 'NONE' || cellNavigationMode === 'CHANGE_ROW') {\n    const atLastCellInRow = idx === maxColIdx;\n    const atFirstCellInRow = idx === 0;\n    const atLastRow = rowIdx === maxRowIdx;\n    const atFirstRow = rowIdx === minRowIdx;\n\n    return shiftKey ? atFirstCellInRow && atFirstRow : atLastCellInRow && atLastRow;\n  }\n\n  return false;\n}\n","import type { CSSProperties } from 'react';\nimport clsx from 'clsx';\n\nimport type { CalculatedColumn, CalculatedColumnOrColumnGroup } from '../types';\nimport { cellClassname, cellFrozenClassname, cellFrozenLastClassname, rightCellFrozenFirstClassname } from '../style';\n\nexport function getRowStyle(rowIdx: number, height?: number): CSSProperties {\n  if (height !== undefined) {\n    return {\n      '--rdg-grid-row-start': rowIdx,\n      '--rdg-row-height': `${height}px`,\n      'transform' : `translateY(${rowIdx*height}px)`\n    } as unknown as CSSProperties;\n  }\n  return { '--rdg-grid-row-start': rowIdx } as unknown as CSSProperties;\n}\n\nexport function getHeaderCellStyle<R, SR>(\n  column: CalculatedColumnOrColumnGroup<R, SR>,\n  rowIdx: number,\n  rowSpan: number\n): React.CSSProperties {\n  const gridRowEnd = rowIdx + 1;\n  const paddingBlockStart = `calc(${rowSpan - 1} * var(--rdg-header-row-height))`;\n\n  if (column.parent === undefined) {\n    return {\n      insetBlockStart: 0,\n      gridRowStart: 1,\n      gridRowEnd,\n      paddingBlockStart,\n      height : `calc(${rowSpan} * var(--rdg-header-row-height))`\n    };\n  }\n\n  return {\n    insetBlockStart: `calc(${rowIdx-rowSpan}* var(--rdg-header-row-height))`,\n    gridRowStart: gridRowEnd - rowSpan,\n    gridRowEnd,\n    paddingBlockStart,\n    height : `calc(${rowSpan} * var(--rdg-header-row-height))`\n  };\n}\n\nexport function getCellStyle<R, SR>(\n  column: CalculatedColumn<R, SR>,\n  colSpan = 1\n): React.CSSProperties {\n  const index = column.idx + 1;\n  return {\n    gridColumnStart: index,\n    gridColumnEnd: index + colSpan,\n    insetInlineStart: column.frozen && column.frozenColumnPosition === 'LEFT' ? `var(--rdg-frozen-left-${column.idx})` : undefined,\n    insetInlineEnd: column.frozen && column.frozenColumnPosition === 'RIGHT' ? `var(--rdg-frozen-right-${column.idx})` : undefined // if frozen is right use rdf-frozen-right-column-idx \n  };\n}\n\nexport function getSummaryCellStyle<R, SR>(\n  column: CalculatedColumn<R, SR>,\n  colSpan?: number\n): React.CSSProperties {\n  return {\n   ...getCellStyle(column,colSpan),\n    height : `var(--rdg-summary-row-height)`\n  };\n}\n\nexport function getCellClassname<R, SR>(\n  column: CalculatedColumn<R, SR>,\n  ...extraClasses: Parameters<typeof clsx>\n): string {\n  return clsx(\n    cellClassname,\n    {\n      [cellFrozenClassname]: column.frozen,\n      [cellFrozenLastClassname]: column.isLastFrozenColumn,\n      [rightCellFrozenFirstClassname] : column.isFirstFrozenRightColumn\n    },\n    ...extraClasses\n  );\n}\n","import { css } from '@linaria/core';\nimport type { CalculatedColumn } from '../types';\n\nconst measuringCellClassname = css`\n    contain: strict;\n    grid-row: 1;\n    visibility: hidden;\n  \n`;\n\nexport function renderMeasuringCells<R, SR>({\n  viewportColumns\n}: {\n  viewportColumns: readonly CalculatedColumn<R, SR>[];\n}) {\n  return (\n    <>\n      {viewportColumns.map(({ key, idx, minWidth, maxWidth }) => (\n        <div\n          key={key}\n          className={measuringCellClassname}\n          style={{ gridColumnStart: idx + 1, minWidth, maxWidth }}\n          data-measuring-cell-key={key}\n        />\n      ))}\n    </>\n  );\n}","import type { CalculatedColumn, CalculatedColumnOrColumnGroup } from '../types';\n\nexport * from './colSpanUtils';\nexport * from './domUtils';\nexport * from './keyboardUtils';\nexport * from './selectedCellUtils';\nexport * from './styleUtils';\nexport * from './renderMeasuringCells';\n\n\nexport const { min, max, round, floor, sign, abs, ceil } = Math;\n\nexport function getHeaderCellRowSpan<R, SR>(\n  column: CalculatedColumnOrColumnGroup<R, SR>,\n  rowIdx: number\n) {\n  return column.parent === undefined ? rowIdx : column.level - column.parent.level;\n}\n\nexport function assertIsValidKeyGetter<R, K extends React.Key>(\n  keyGetter: unknown\n): asserts keyGetter is (row: R) => K {\n  if (typeof keyGetter !== 'function') {\n    throw new Error('Please specify the rowKeyGetter prop to use selection');\n  }\n}\n\nexport function clampColumnWidth<R, SR>(\n  width: number,\n  { minWidth, maxWidth }: CalculatedColumn<R, SR>\n): number {\n  width = max(width, minWidth);\n\n  // ignore maxWidth if it less than minWidth\n  if (typeof maxWidth === 'number' && maxWidth >= minWidth) {\n    return min(width, maxWidth);\n  }\n\n  return width;\n}\n","import { useMemo } from 'react';\n\nimport type { CalculatedColumn, CalculatedColumnParent, ColumnOrColumnGroup, Omit,Maybe } from '../types';\nimport type { DataGridProps } from '../DataGrid';\nimport { valueFormatter, toggleGroupFormatter } from '../formatters';\nimport { SELECT_COLUMN_KEY } from '../Columns';\nimport { clampColumnWidth, max, min} from '../utils';\n\nconst DEFAULT_COLUMN_WIDTH = 'minmax(max-content,auto)';\nconst DEFAULT_COLUMN_MIN_WIDTH = 80;\n \n\n\ntype Mutable<T> = {\n  -readonly [P in keyof T]: T[P] extends ReadonlyArray<infer V> ? Mutable<V>[] : T[P];\n};\n\ninterface WithParent<R, SR> {\n  readonly parent: MutableCalculatedColumnParent<R, SR> | undefined;\n}\n\ntype MutableCalculatedColumnParent<R, SR> = Omit<Mutable<CalculatedColumnParent<R, SR>>, 'parent'> &\n  WithParent<R, SR>;\ntype MutableCalculatedColumn<R, SR> = Omit<Mutable<CalculatedColumn<R, SR>>, 'parent'> &\n  WithParent<R, SR>;\n\ninterface ColumnMetric {\n  width: number;\n  left: number;\n}\n\ninterface CalculatedColumnsArgs<R, SR>  {\n  rawColumns: readonly ColumnOrColumnGroup<R, SR>[];\n  defaultColumnOptions: DataGridProps<R, SR>['defaultColumnOptions'];\n  viewportWidth: number;\n  scrollLeft: number;\n  measuredColumnWidths: ReadonlyMap<string, number>;\n  resizedColumnWidths: ReadonlyMap<string, number>;\n  rawGroupBy :Maybe<readonly string[]>;\n  enableVirtualization: boolean;\n}\n\nexport function useCalculatedColumns<R, SR>({\n  rawColumns,\n  measuredColumnWidths,\n  resizedColumnWidths,\n  viewportWidth,\n  scrollLeft,\n  defaultColumnOptions,\n  rawGroupBy,\n  enableVirtualization\n}: CalculatedColumnsArgs<R, SR>) {\n  const defaultWidth = defaultColumnOptions?.width ?? DEFAULT_COLUMN_WIDTH;\n  const defaultMinWidth = defaultColumnOptions?.minWidth ?? DEFAULT_COLUMN_MIN_WIDTH;\n  const defaultMaxWidth = defaultColumnOptions?.maxWidth ?? undefined;\n  const defaultFormatter = defaultColumnOptions?.formatter ?? valueFormatter;\n\n  const defaultSortable = defaultColumnOptions?.sortable ?? false;\n  const defaultResizable = defaultColumnOptions?.resizable ?? false;\n  const defaultFrozenColumnPostion = 'LEFT'; \n  const { columns, colSpanColumns, lastFrozenColumnIndex,firstRightFrozenColumnIndex, groupBy , headerRowsCount } = useMemo((): {\n    columns: readonly CalculatedColumn<R, SR>[];\n    colSpanColumns: readonly CalculatedColumn<R, SR>[];\n    lastFrozenColumnIndex: number;\n    firstRightFrozenColumnIndex : number;\n    groupBy: readonly string[];\n    readonly headerRowsCount: number;\n  } => {\n    // Filter rawGroupBy and ignore keys that do not match the columns prop\n\n    let headerRowsCount = 1;\n    const columns: MutableCalculatedColumn<R, SR>[] = [];\n\n    const groupBy: string[] = [];\n    let lastFrozenColumnIndex = -1;\n    let totalRightFrozenColumns = 0;\n\n    collectColumns(rawColumns, 1);\n\n    function collectColumns(\n      rawColumns: readonly ColumnOrColumnGroup<R, SR>[],\n      level: number,\n      parent?: MutableCalculatedColumnParent<R, SR>\n    ) {\n      for(const rawColumn of rawColumns) {\n        if('children' in rawColumn) {\n          const calculatedColumnParent: MutableCalculatedColumnParent<R, SR> = {\n            name: rawColumn.name,\n            parent,\n            idx: -1,\n            colSpan: 0,\n            level: 0,\n            headerCellClass: rawColumn.headerCellClass\n          };\n\n          collectColumns(rawColumn.children, level + 1, calculatedColumnParent);\n          continue;\n        }\n\n        const rowGroup = rawGroupBy?.includes(rawColumn.key) ?? false;\n        const frozen = rowGroup || rawColumn.frozen || false; // change the frozen column type to string 'left | right';\n        const frozenColumnPosition = rowGroup ? defaultFrozenColumnPostion : rawColumn.frozenColumnPosition ?? defaultFrozenColumnPostion;\n        const column: MutableCalculatedColumn<R, SR> = {\n          ...rawColumn,\n          parent,\n          idx: 0,\n          level: level,\n          frozen,\n          frozenColumnPosition,\n          isLastFrozenColumn: false,\n          isFirstFrozenRightColumn : false,\n          rowGroup,\n          width: rawColumn.width ?? defaultWidth,\n          minWidth: rawColumn.minWidth ?? defaultMinWidth,\n          maxWidth: rawColumn.maxWidth ?? defaultMaxWidth,\n          sortable: rawColumn.sortable ?? defaultSortable,\n          resizable: rawColumn.resizable ?? defaultResizable,\n          formatter: rawColumn.formatter ?? defaultFormatter,\n          defaultColumnValue : rawColumn.defaultColumnValue ?? \"\",\n        };\n\n        if (rowGroup) {\n          column.groupFormatter ??= toggleGroupFormatter;\n        }\n\n        columns.push(column);\n\n        if (frozen && frozenColumnPosition ===  \"LEFT\") {\n          lastFrozenColumnIndex++;\n        } else if(frozen && frozenColumnPosition === \"RIGHT\") {\n          totalRightFrozenColumns++;\n        } \n\n        if (level > headerRowsCount) {\n          headerRowsCount = level;\n        }\n\n      }\n\n    }\n    \n\n    \n\n    // sort the colums first by select column , then groupBy , then leftFrozen then normalColumns then rightFrozenColumns\n    columns.sort(({ key: aKey, frozen: frozenA ,frozenColumnPosition : frozenColumnPositionA}, { key: bKey, frozen: frozenB , frozenColumnPosition : frozenColumnPositionB }) => {\n      // Sort select column first:\n      if (aKey === SELECT_COLUMN_KEY) return -1;\n      if (bKey === SELECT_COLUMN_KEY) return 1;\n\n      // Sort grouped columns second, following the groupBy order:\n      if (rawGroupBy?.includes(aKey)) {\n        if (rawGroupBy.includes(bKey)) {\n          return rawGroupBy.indexOf(aKey) - rawGroupBy.indexOf(bKey);\n        }\n        return -1;\n      }\n      if (rawGroupBy?.includes(bKey)) return 1;\n\n      if(frozenA && frozenB) {\n        if(frozenColumnPositionA === 'LEFT' && frozenColumnPositionB === 'RIGHT') {\n          return -1;\n        } \n        if(frozenColumnPositionB === 'LEFT' && frozenColumnPositionA === 'RIGHT') {\n          return 1;\n        } \n        return 0;\n      }\n\n      if(frozenA && !frozenB) {\n        return  frozenColumnPositionA === 'LEFT' ? -1 : 1;\n      }\n\n      if(!frozenA && frozenB) {\n        return frozenColumnPositionB === 'LEFT' ? 1 : -1;\n      }\n\n      // Sort other columns last:\n      return 0;\n    });\n\n    const colSpanColumns: CalculatedColumn<R, SR>[] = [];\n    columns.forEach((column, idx) => {\n      column.idx = idx;\n      updateColumnParent(column, idx, 0);\n      if (column.rowGroup) {\n        groupBy.push(column.key);\n      }\n\n      if (column.colSpan != null) {\n        colSpanColumns.push(column);\n      }\n    });\n    // set rightFrozenColumnField also\n    if (lastFrozenColumnIndex !== -1) {\n      columns[lastFrozenColumnIndex].isLastFrozenColumn = true;\n    }\n\n    if(totalRightFrozenColumns > 0) {\n      columns[columns.length-totalRightFrozenColumns].isFirstFrozenRightColumn = true;\n    }\n\n    const firstRightFrozenColumnIndex =  columns.length-totalRightFrozenColumns;\n\n    return {\n      columns,\n      colSpanColumns,\n      lastFrozenColumnIndex,\n      firstRightFrozenColumnIndex,\n      groupBy,\n      headerRowsCount\n    };\n  }, [\n    rawColumns,\n    defaultWidth,\n    defaultMinWidth,\n    defaultMaxWidth,\n    defaultFormatter,\n    defaultResizable,\n    defaultSortable,\n    rawGroupBy\n  ]);\n\n  const {templateColumns, layoutCssVars, totalFrozenColumnWidth,totalRightFrozenColumnWidth, columnMetrics } = useMemo((): {\n    templateColumns: readonly string[];\n    layoutCssVars: Readonly<Record<string, string>>;\n    totalFrozenColumnWidth: number;\n    totalRightFrozenColumnWidth : number;\n    columnMetrics: ReadonlyMap<CalculatedColumn<R, SR>, ColumnMetric>;\n  } => {\n    const columnMetrics = new Map<CalculatedColumn<R, SR>, ColumnMetric>();\n    let left = 0;\n    let totalFrozenColumnWidth = 0;\n    const templateColumns: string[] = [];\n    let totalRightFrozenColumnWidth = 0;\n    //let firstRightFrozenColumnPosition = 0;\n\n    for (const column of columns) {\n        let width = resizedColumnWidths.get(column.key) ?? measuredColumnWidths.get(column.key) ?? column.width;\n        if (typeof width === 'number') {\n          width = clampColumnWidth(width, column);\n        } else {\n          width = column.minWidth;\n        }\n        templateColumns.push(`${width}px`);\n        columnMetrics.set(column, { width, left });\n        left += width;\n        if(column.frozen && column.frozenColumnPosition === 'RIGHT') {\n          totalRightFrozenColumnWidth += width;\n        }\n    }\n     \n    if (lastFrozenColumnIndex !== -1) {\n      const columnMetric = columnMetrics.get(columns[lastFrozenColumnIndex])!;\n      totalFrozenColumnWidth = columnMetric.left + columnMetric.width;\n    }\n\n    // filter columns based on right frozen and get the width from column metrics and add assing to totalFrozenRightColumnWidth;\n    // looping from startRightFrozenColumnIndex add in layoutCssVars --rdg-frozen-right-${column.idx} as (viewPortWidth - (columMetrics.get(column)!.left +columMetrics.get(column)!.width))\n    const layoutCssVars: Record<string, string> = {};\n\n    for (let i = 0; i <= lastFrozenColumnIndex; i++) {\n      const column = columns[i];\n      layoutCssVars[`--rdg-frozen-left-${column.idx}`] = `${columnMetrics.get(column)!.left}px`;\n    }\n\n    let width = 0;\n    for(let i = columns.length -1 ; i >= firstRightFrozenColumnIndex;i--) {\n        const column = columns[i];\n        const columnMetric = columnMetrics.get(column);\n        layoutCssVars[`--rdg-frozen-right-${column.idx}`] = `${width}px`;\n        if(columnMetric?.width) {\n          width += columnMetric.width ;\n        }\n    }\n\n\n    return {templateColumns, layoutCssVars, totalFrozenColumnWidth,totalRightFrozenColumnWidth,columnMetrics };\n  }, [measuredColumnWidths, resizedColumnWidths, columns, lastFrozenColumnIndex,firstRightFrozenColumnIndex]);\n\n  const [colOverscanStartIdx, colOverscanEndIdx] = useMemo((): [number, number] => {\n    const lastColIdx =  min(firstRightFrozenColumnIndex -1,columns.length -1);// min(startRightFrozenColumnINdex -1,columns.length-1)\n    if (!enableVirtualization) {\n      return [0, lastColIdx];\n    }\n    // get the viewport's left side and right side positions for non-frozen columns\n    const viewportLeft = scrollLeft + totalFrozenColumnWidth;\n    const viewportRight = scrollLeft + viewportWidth - totalRightFrozenColumnWidth;// subtract totalRightSizeFrozenColumnWidth\n    // get first and last non-frozen column indexes\n    const firstUnfrozenColumnIdx = min(lastFrozenColumnIndex + 1, lastColIdx);\n\n    // skip rendering non-frozen columns if the frozen columns cover the entire viewport\n    if (viewportLeft >= viewportRight) {\n      return [firstUnfrozenColumnIdx, firstUnfrozenColumnIdx];\n    }\n\n    // get the first visible non-frozen column index\n    let colVisibleStartIdx = firstUnfrozenColumnIdx;\n    while (colVisibleStartIdx < lastColIdx) {\n      const { left, width } = columnMetrics.get(columns[colVisibleStartIdx])!;\n      // if the right side of the columnn is beyond the left side of the available viewport,\n      // then it is the first column that's at least partially visible\n      if (left + width > viewportLeft) {\n        break;\n      }\n      colVisibleStartIdx++;\n    }\n\n    // get the last visible non-frozen column index\n    let colVisibleEndIdx = colVisibleStartIdx;\n    while (colVisibleEndIdx < lastColIdx) {\n      const { left, width } = columnMetrics.get(columns[colVisibleEndIdx])!;\n      // if the right side of the column is beyond or equal to the right side of the available viewport,\n      // then it the last column that's at least partially visible, as the previous column's right side is not beyond the viewport.\n      if (left + width >= viewportRight) {\n        break;\n      }\n      colVisibleEndIdx++;\n    }\n\n    const colOverscanStartIdx = max(firstUnfrozenColumnIdx, colVisibleStartIdx - 1);\n    const colOverscanEndIdx = min(lastColIdx, colVisibleEndIdx + 1);\n\n    return [colOverscanStartIdx, colOverscanEndIdx];\n  }, [firstRightFrozenColumnIndex, columns, enableVirtualization, scrollLeft, totalFrozenColumnWidth, viewportWidth, totalRightFrozenColumnWidth, lastFrozenColumnIndex, columnMetrics]);\n\n  return {\n    columns,\n    colSpanColumns,\n    colOverscanStartIdx,\n    colOverscanEndIdx,\n    templateColumns,\n    layoutCssVars,\n    columnMetrics,\n    headerRowsCount,\n    lastFrozenColumnIndex,\n    totalFrozenColumnWidth,\n    totalRightFrozenColumnWidth,\n    firstRightFrozenColumnIndex,\n    groupBy\n  };\n}\n\nfunction updateColumnParent<R, SR>(\n  column: MutableCalculatedColumn<R, SR> | MutableCalculatedColumnParent<R, SR>,\n  index: number,\n  level: number\n) {\n  if (level < column.level) {\n    column.level = level;\n  }\n\n  if (column.parent !== undefined) {\n    const { parent } = column;\n    if (parent.idx === -1) {\n      parent.idx = index;\n    }\n    parent.colSpan += 1;\n    updateColumnParent(parent, index, level - 1);\n  }\n}\n\n\n","// eslint-disable-next-line @typescript-eslint/no-restricted-imports\nimport { useEffect, useLayoutEffect as useOriginalLayoutEffect } from 'react';\n\n// Silence silly warning\n// https://reactjs.org/link/uselayouteffect-ssr\nexport const useLayoutEffect = typeof window === 'undefined' ? useEffect : useOriginalLayoutEffect;\n","import { useRef } from 'react';\nimport { useLayoutEffect } from './useLayoutEffect';\n\nexport function useFocusRef<T extends HTMLOrSVGElement>(isSelected: boolean) {\n  const ref = useRef<T>(null);\n\n  useLayoutEffect(() => {\n    if (!isSelected) return;\n    ref.current?.focus({ preventScroll: true });\n  }, [isSelected]);\n\n  return {\n    ref,\n    tabIndex: isSelected ? 0 : -1\n  };\n}\n","import { useRef, useState } from 'react';\nimport { flushSync } from 'react-dom';\n\nimport { useLayoutEffect } from './useLayoutEffect';\n\n\nexport function useGridDimensions(){\n  const gridRef = useRef<HTMLDivElement>(null);\n  const [inlineSize, setInlineSize] = useState(1);\n  const [blockSize, setBlockSize] = useState(1);\n\n  useLayoutEffect(() => {\n    const { ResizeObserver } = window;\n\n    // don't break in Node.js (SSR), jest/jsdom, and browsers that don't support ResizeObserver\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n    if (ResizeObserver == null) return;\n\n    const { clientWidth, clientHeight, offsetWidth, offsetHeight } = gridRef.current!;\n    const { width, height } = gridRef.current!.getBoundingClientRect();\n    const initialWidth = width - offsetWidth + clientWidth;\n    const initialHeight = height - offsetHeight + clientHeight;\n\n    setInlineSize(initialWidth);\n    setBlockSize(initialHeight);\n\n    const resizeObserver = new ResizeObserver((entries) => {\n      const size = entries[0].contentBoxSize[0];\n      flushSync(() => {\n        setInlineSize(size.inlineSize);\n        setBlockSize(size.blockSize);\n      });\n    });\n    resizeObserver.observe(gridRef.current!);\n\n    return () => {\n      resizeObserver.disconnect();\n    };\n  }, []);\n\n  return [gridRef, inlineSize, blockSize] as const;\n}\n\n","import { useRef, useEffect, useCallback } from 'react';\n\n// https://reactjs.org/docs/hooks-faq.html#what-can-i-do-if-my-effect-dependencies-change-too-often\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function useLatestFunc<T extends (...args: any[]) => any>(fn: T) {\n  const ref = useRef(fn);\n\n  useEffect(() => {\n    ref.current = fn;\n  });\n\n  return useCallback((...args: Parameters<T>) => {\n    ref.current(...args);\n  }, []);\n}\n","import {  useState } from 'react';\n\n\n// https://www.w3.org/TR/wai-aria-practices-1.1/#kbd_roving_tabindex\nexport function useRovingCellRef(isSelected: boolean) {\n  // https://www.w3.org/TR/wai-aria-practices-1.1/#gridNav_focus\n  const [isChildFocused, setIsChildFocused] = useState(false);\n\n  if (isChildFocused && !isSelected) {\n    setIsChildFocused(false);\n  }\n\n \n\n  function onFocus(event: React.FocusEvent<HTMLDivElement>) {\n    if (event.target !== event.currentTarget) {\n      setIsChildFocused(true);\n    }\n  }\n\n  const isFocused = isSelected && !isChildFocused;\n\n  return {\n    tabIndex: isFocused ? 0 : -1,\n    onFocus: isSelected ? onFocus : undefined\n  };\n}\n","import { useMemo } from 'react';\n\nimport { getColSpan } from '../utils';\nimport type { CalculatedColumn, GroupRow, Maybe } from '../types';\n\ninterface ViewportColumnsArgs<R, SR> {\n  columns: readonly CalculatedColumn<R, SR>[];\n  colSpanColumns: readonly CalculatedColumn<R, SR>[];\n  rows: readonly (R | GroupRow<R>)[];\n  topSummaryRows: Maybe<readonly SR[]>;\n  bottomSummaryRows: Maybe<readonly SR[]>;\n  colOverscanStartIdx: number;\n  colOverscanEndIdx: number;\n  lastFrozenColumnIndex: number;\n  firstRightFrozenColumnIndex : number;\n  rowOverscanStartIdx: number;\n  rowOverscanEndIdx: number;\n  isGroupRow: (row: R | GroupRow<R>) => row is GroupRow<R>;\n}\n\nexport function useViewportColumns<R, SR>({\n  columns,\n  colSpanColumns,\n  rows,\n  topSummaryRows,\n  bottomSummaryRows,\n  colOverscanStartIdx,\n  colOverscanEndIdx,\n  lastFrozenColumnIndex,\n  firstRightFrozenColumnIndex,\n  rowOverscanStartIdx,\n  rowOverscanEndIdx,\n  isGroupRow\n}: ViewportColumnsArgs<R, SR>) {\n  // find the column that spans over a column within the visible columns range and adjust colOverscanStartIdx\n  const startIdx = useMemo(() => {\n    if (colOverscanStartIdx === 0) return 0;\n\n    let startIdx = colOverscanStartIdx;\n\n    const updateStartIdx = (colIdx: number, colSpan: number | undefined) => {\n      if (colSpan !== undefined && colIdx + colSpan > colOverscanStartIdx) {\n        startIdx = colIdx;\n        return true;\n      }\n      return false;\n    };\n\n    for (const column of colSpanColumns) {\n      // check header row\n      const colIdx = column.idx;\n      if (colIdx >= startIdx) break;\n      if (updateStartIdx(colIdx, getColSpan(column, lastFrozenColumnIndex, { type: 'HEADER' }))) {\n        break;\n      }\n\n      // check viewport rows\n      for (let rowIdx = rowOverscanStartIdx; rowIdx <= rowOverscanEndIdx; rowIdx++) {\n        const row = rows[rowIdx];\n        if (isGroupRow(row)) continue;\n        if (\n          updateStartIdx(colIdx, getColSpan(column, lastFrozenColumnIndex, { type: 'ROW', row }))\n        ) {\n          break;\n        }\n      }\n\n      // check summary rows\n      if (topSummaryRows != null) {\n        for (const row of topSummaryRows) {\n          if (\n            updateStartIdx(\n              colIdx,\n              getColSpan(column, lastFrozenColumnIndex, { type: 'SUMMARY', row })\n            )\n          ) {\n            break;\n          }\n        }\n      }\n\n      if (bottomSummaryRows != null) {\n        for (const row of bottomSummaryRows) {\n          if (\n            updateStartIdx(\n              colIdx,\n              getColSpan(column, lastFrozenColumnIndex, { type: 'SUMMARY', row })\n            )\n          ) {\n            break;\n          }\n        }\n      }\n    }\n\n    return startIdx;\n  }, [\n    rowOverscanStartIdx,\n    rowOverscanEndIdx,\n    rows,\n    topSummaryRows,\n    bottomSummaryRows,\n    colOverscanStartIdx,\n    lastFrozenColumnIndex,\n    colSpanColumns,\n    isGroupRow\n  ]);\n\n\n  return useMemo((): readonly CalculatedColumn<R, SR>[] => {\n    const viewportColumns: CalculatedColumn<R, SR>[] = [];\n    const flexWidthViewportColumns: CalculatedColumn<R, SR>[] = [];\n    for (let colIdx = 0; colIdx <= colOverscanEndIdx; colIdx++) {\n      const column = columns[colIdx];\n      if (colIdx < startIdx && !column.frozen) continue;\n      viewportColumns.push(column);\n     \n    }\n    if(firstRightFrozenColumnIndex > -1) {\n      for(let colIdx = firstRightFrozenColumnIndex; colIdx < columns.length; colIdx ++) {\n        const column = columns[colIdx];\n        viewportColumns.push(column);\n        if (typeof column.width === 'string') {\n          flexWidthViewportColumns.push(column);\n        }\n      }\n      \n    }\n    \n\n    return viewportColumns\n  }\n\n  , [startIdx, colOverscanEndIdx, columns,firstRightFrozenColumnIndex]);\n\n \n}\n","import { useMemo } from 'react';\nimport { floor, max, min } from '../utils';\nimport type { GroupRow, Maybe, RowHeightArgs } from '../types';\n\ntype GroupByDictionary<TRow> = Record<\n  string,\n  {\n    readonly childRows: readonly TRow[];\n    readonly childGroups: readonly TRow[] | Readonly<GroupByDictionary<TRow>>;\n    readonly startRowIndex: number;\n  }\n>;\n\ninterface ViewportRowsArgs<R> {\n  rawRows: readonly R[];\n  rowHeight: number | ((args: RowHeightArgs<R>) => number);\n  clientHeight: number;\n  scrollTop: number;\n  groupBy: readonly string[];\n  rowGrouper: Maybe<(rows: readonly R[], columnKey: string) => Record<string, readonly R[]>>;\n  expandedGroupIds: Maybe<ReadonlySet<unknown>>;\n  enableVirtualization: boolean;\n}\n\n// TODO: https://github.com/microsoft/TypeScript/issues/41808\nfunction isReadonlyArray(arr: unknown): arr is readonly unknown[] {\n  return Array.isArray(arr);\n}\n\nexport function useViewportRows<R>({\n  rawRows,\n  rowHeight,\n  clientHeight,\n  scrollTop,\n  groupBy,\n  rowGrouper,\n  expandedGroupIds,\n  enableVirtualization\n}: ViewportRowsArgs<R>) {\n  const [groupedRows, rowsCount] = useMemo(() => {\n    if (groupBy.length === 0 || rowGrouper == null) return [undefined, rawRows.length];\n\n    const groupRows = (\n      rows: readonly R[],\n      [groupByKey, ...remainingGroupByKeys]: readonly string[],\n      startRowIndex: number\n    ): [Readonly<GroupByDictionary<R>>, number] => {\n      let groupRowsCount = 0;\n      const groups: GroupByDictionary<R> = {};\n\n      const rowInfo = rowGrouper(rows, groupByKey);\n     \n\n      for (const [key, childRows] of Object.entries(rowInfo)) {\n        // Recursively group each parent group\n        const [childGroups, childRowsCount] =\n          remainingGroupByKeys.length === 0\n            ? [childRows, childRows.length]\n            : groupRows(childRows, remainingGroupByKeys, startRowIndex + groupRowsCount + 1); // 1 for parent row\n        groups[key] = { childRows, childGroups, startRowIndex: startRowIndex + groupRowsCount };\n        groupRowsCount += childRowsCount + 1; // 1 for parent row\n      }\n\n      return [groups, groupRowsCount];\n    };\n\n    return groupRows(rawRows, groupBy, 0);\n  }, [groupBy, rowGrouper, rawRows]);\n\n  const [rows, isGroupRow] = useMemo((): [\n    ReadonlyArray<R | GroupRow<R>>,\n    (row: R | GroupRow<R>) => row is GroupRow<R>\n  ] => {\n    const allGroupRows = new Set<unknown>();\n    if (!groupedRows) return [rawRows, isGroupRow];\n\n    const flattenedRows: Array<R | GroupRow<R>> = [];\n    const expandGroup = (\n      rows: GroupByDictionary<R> | readonly R[],\n      parentId: string | undefined,\n      level: number\n    ): void => {\n      if (isReadonlyArray(rows)) {\n        flattenedRows.push(...rows);\n        return;\n      } \n      Object.keys(rows).forEach((groupKey, posInSet, keys) => {\n        // TODO: should users have control over the generated key?\n        const id = parentId !== undefined ? `${parentId}__${groupKey.toString()}` : groupKey.toString();\n        const isExpanded = expandedGroupIds?.has(id) ?? false;\n        const { childRows, childGroups, startRowIndex } = rows[groupKey];\n\n        const groupRow: GroupRow<R> = {\n          id,\n          parentId,\n          groupKey,\n          isExpanded,\n          childRows,\n          level,\n          posInSet,\n          startRowIndex,\n          setSize: keys.length\n        };\n        flattenedRows.push(groupRow);\n        allGroupRows.add(groupRow);\n\n        if (isExpanded) {\n          expandGroup(childGroups, id, level + 1);\n        }\n      });\n    };\n\n    expandGroup(groupedRows, undefined, 0);\n    return [flattenedRows, isGroupRow];\n\n    function isGroupRow(row: R | GroupRow<R>): row is GroupRow<R> {\n      return allGroupRows.has(row);\n    }\n  }, [expandedGroupIds, groupedRows, rawRows]);\n\n  const { totalRowHeight, getRowTop, getRowHeight, findRowIdx } = useMemo(() => {\n    if (typeof rowHeight === 'number') {\n      return {\n        totalRowHeight: rowHeight * rows.length,\n        getRowTop: (rowIdx: number) => rowIdx * rowHeight,\n        getRowHeight: () => rowHeight,\n        findRowIdx: (offset: number) => floor(offset / rowHeight)\n      };\n    }\n\n    let totalRowHeight = 0;\n    // Calcule the height of all the rows upfront. This can cause performance issues\n    // and we can consider using a similar approach as react-window\n    // https://github.com/bvaughn/react-window/blob/b0a470cc264e9100afcaa1b78ed59d88f7914ad4/src/VariableSizeList.js#L68\n    const rowPositions = rows.map((row: R | GroupRow<R>) => {\n      const currentRowHeight = isGroupRow(row)\n        ? rowHeight({ type: 'GROUP', row })\n        : rowHeight({ type: 'ROW', row });\n      const position = { top: totalRowHeight, height: currentRowHeight };\n      totalRowHeight += currentRowHeight;\n      return position;\n    });\n\n    const validateRowIdx = (rowIdx: number) => {\n      return max(0, min(rows.length - 1, rowIdx));\n    };\n\n    return {\n      totalRowHeight,\n      getRowTop: (rowIdx: number) => rowPositions[validateRowIdx(rowIdx)].top,\n      getRowHeight: (rowIdx: number) => rowPositions[validateRowIdx(rowIdx)].height,\n      findRowIdx(offset: number) {\n        let start = 0;\n        let end = rowPositions.length - 1;\n        while (start <= end) {\n          const middle = start + floor((end - start) / 2);\n          const currentOffset = rowPositions[middle].top;\n\n          if (currentOffset === offset) return middle;\n\n          if (currentOffset < offset) {\n            start = middle + 1;\n          } else if (currentOffset > offset) {\n            end = middle - 1;\n          }\n\n          if (start > end) return end;\n        }\n        return 0;\n      }\n    };\n  }, [isGroupRow, rowHeight, rows]);\n\n  let rowOverscanStartIdx = 0;\n  let rowOverscanEndIdx = rows.length - 1;\n\n  let topFillerHeight = 0;\n  let bottomFillerHeight = 0;\n\n  if (enableVirtualization && rows.length > 0) {\n    const overscanThreshold = 4;\n    const rowVisibleStartIdx = findRowIdx(scrollTop);\n    const rowVisibleEndIdx = findRowIdx(scrollTop + clientHeight);\n    rowOverscanStartIdx = max(0, rowVisibleStartIdx - overscanThreshold);\n    rowOverscanEndIdx = min(rows.length - 1, rowVisibleEndIdx + overscanThreshold);\n    topFillerHeight =  getRowHeight(rowOverscanStartIdx)*rowOverscanStartIdx;\n    bottomFillerHeight = getRowHeight(rowOverscanEndIdx)*(rows.length - rowOverscanEndIdx - 1);\n  }\n\n  return {\n    rowOverscanStartIdx,\n    rowOverscanEndIdx,\n    rows,\n    topFillerHeight,\n    bottomFillerHeight,\n    rowsCount,\n    totalRowHeight,\n    isGroupRow,\n    getRowTop,\n    getRowHeight,\n    findRowIdx\n  };\n}\n","import { useRef } from 'react';\nimport { flushSync } from 'react-dom';\n\nimport type { CalculatedColumn, StateSetter } from '../types';\nimport { useLayoutEffect } from './useLayoutEffect';\nimport type { DataGridProps } from '../DataGrid';\n\nexport function useColumnWidths<R, SR>(\n  columns: readonly CalculatedColumn<R, SR>[],\n  viewportColumns: readonly CalculatedColumn<R, SR>[],\n  templateColumns: readonly string[],\n  gridRef: React.RefObject<HTMLDivElement>,\n  gridWidth: number,\n  resizedColumnWidths: ReadonlyMap<string, number>,\n  measuredColumnWidths: ReadonlyMap<string, number>,\n  setResizedColumnWidths: StateSetter<ReadonlyMap<string, number>>,\n  setMeasuredColumnWidths: StateSetter<ReadonlyMap<string, number>>,\n  onColumnResize: DataGridProps<R, SR>['onColumnResize']\n) {\n  const prevGridWidthRef = useRef(gridWidth);\n  const columnsCanFlex: boolean = columns.length === viewportColumns.length;\n  // Allow columns to flex again when...\n  const ignorePreviouslyMeasuredColumns: boolean =\n    // there is enough space for columns to flex and the grid was resized\n    columnsCanFlex && gridWidth !== prevGridWidthRef.current;\n  const newTemplateColumns = [...templateColumns];\n  const columnsToMeasure: string[] = [];\n\n  for (const { key, idx, width } of viewportColumns) {\n    if (\n      typeof width === 'string' &&\n      (ignorePreviouslyMeasuredColumns || !measuredColumnWidths.has(key)) &&\n      !resizedColumnWidths.has(key)\n    ) {\n      newTemplateColumns[idx] = width;\n      columnsToMeasure.push(key);\n    }\n  }\n\n  const gridTemplateColumns = newTemplateColumns.join(' ');\n\n  useLayoutEffect(() => {\n    prevGridWidthRef.current = gridWidth;\n    updateMeasuredWidths(columnsToMeasure);\n  });\n\n  function updateMeasuredWidths(columnsToMeasure: readonly string[]) {\n    if (columnsToMeasure.length === 0) return;\n\n    setMeasuredColumnWidths((measuredColumnWidths) => {\n      const newMeasuredColumnWidths = new Map(measuredColumnWidths);\n      let hasChanges = false;\n\n      for (const key of columnsToMeasure) {\n        const measuredWidth = measureColumnWidth(gridRef, key);\n        hasChanges ||= measuredWidth !== measuredColumnWidths.get(key);\n        if (measuredWidth === undefined) {\n          newMeasuredColumnWidths.delete(key);\n        } else {\n          newMeasuredColumnWidths.set(key, measuredWidth);\n        }\n      }\n\n      return hasChanges ? newMeasuredColumnWidths : measuredColumnWidths;\n    });\n  }\n\n  function handleColumnResize(column: CalculatedColumn<R, SR>, nextWidth: number | 'max-content') {\n    const { key: resizingKey } = column;\n    const newTemplateColumns = [...templateColumns];\n    const columnsToMeasure: string[] = [];\n\n    for (const { key, idx, width } of viewportColumns) {\n      if (resizingKey === key) {\n        const width = typeof nextWidth === 'number' ? `${nextWidth}px` : nextWidth;\n        newTemplateColumns[idx] = width;\n      } else if (columnsCanFlex && typeof width === 'string' && !resizedColumnWidths.has(key)) {\n        newTemplateColumns[idx] = width;\n        columnsToMeasure.push(key);\n      }\n    }\n\n    gridRef.current!.style.gridTemplateColumns = newTemplateColumns.join(' ');\n    const measuredWidth =\n      typeof nextWidth === 'number' ? nextWidth : measureColumnWidth(gridRef, resizingKey)!;\n\n    // TODO: remove\n    // need flushSync to keep frozen column offsets in sync\n    // we may be able to use `startTransition` or even `requestIdleCallback` instead\n    flushSync(() => {\n      setResizedColumnWidths((resizedColumnWidths) => {\n        const newResizedColumnWidths = new Map(resizedColumnWidths);\n        newResizedColumnWidths.set(resizingKey, measuredWidth);\n        return newResizedColumnWidths;\n      });\n      updateMeasuredWidths(columnsToMeasure);\n    });\n\n    onColumnResize?.(column.idx, measuredWidth);\n  }\n\n  return {\n    gridTemplateColumns,\n    handleColumnResize\n  } as const;\n}\n\nfunction measureColumnWidth(gridRef: React.RefObject<HTMLDivElement>, key: string) {\n  const selector = `[data-measuring-cell-key=\"${CSS.escape(key)}\"]`;\n  const measuringCell = gridRef.current!.querySelector(selector);\n  return measuringCell?.getBoundingClientRect().width;\n}","import { useRef } from 'react';\n\nimport { useLayoutEffect } from './hooks';\nimport { scrollIntoView } from './utils';\n\nexport interface PartialPosition {\n  readonly idx?: number | undefined;\n  readonly rowIdx?: number | undefined;\n}\n\nexport default function ScrollToCell({\n  scrollToPosition: { idx, rowIdx },\n  gridElement,\n  setScrollToCellPosition\n}: {\n  scrollToPosition: PartialPosition;\n  gridElement: HTMLDivElement;\n  setScrollToCellPosition: (cell: null) => void;\n}) {\n  const ref = useRef<HTMLDivElement>(null);\n\n  useLayoutEffect(() => {\n    // scroll until the cell is completely visible\n    // this is needed if the grid has auto-sized columns\n    scrollIntoView(ref.current);\n  });\n\n  useLayoutEffect(() => {\n    function removeScrollToCell() {\n      setScrollToCellPosition(null);\n    }\n\n    const observer = new IntersectionObserver(removeScrollToCell, {\n      root: gridElement,\n      threshold: 1.0\n    });\n\n    observer.observe(ref.current!);\n\n    return () => {\n      observer.disconnect();\n    };\n  }, [gridElement, setScrollToCellPosition]);\n\n  return (\n    <div\n      ref={ref}\n      style={{\n        gridColumn: idx === undefined ? '1/-1' : idx + 1,\n        gridRow: rowIdx === undefined ? '1/-1' : rowIdx + 2\n      }}\n    />\n  );\n}","import { css } from '@linaria/core';\n\nimport type { HeaderRendererProps } from './types';\nimport { useDefaultComponents } from './DataGridDefaultComponentsProvider';\n\nconst headerSortCell = css`\n  cursor: pointer;\n  display: flex;\n\n  &:focus {\n    outline: none;\n  }\n`;\n\nexport const headerSortCellClassname = `rdg-header-sort-cell ${headerSortCell}`;\n\nconst headerSortName = css`\n  flex-grow: 1;\n  overflow: hidden;\n  overflow: clip;\n  text-overflow: ellipsis;\n`;\n\nexport const headerSortNameClassname = `rdg-header-sort-name ${headerSortName}`;\n\nexport default function headerRenderer<R, SR>({\n  column,\n  sortDirection,\n  priority,\n  onSort,\n  isCellSelected\n}: HeaderRendererProps<R, SR>) {\n  if (!column.sortable) return <>{column.name}</>;\n\n  return (\n    <SortableHeaderCell\n      onSort={onSort}\n      sortDirection={sortDirection}\n      priority={priority}\n      isCellSelected={isCellSelected}\n    >\n      {column.name}\n    </SortableHeaderCell>\n  );\n}\n\ntype SharedHeaderCellProps<R, SR> = Pick<\n  HeaderRendererProps<R, SR>,\n  'sortDirection' | 'onSort' | 'priority' | 'isCellSelected'\n>;\n\ninterface SortableHeaderCellProps<R, SR> extends SharedHeaderCellProps<R, SR> {\n  children: React.ReactNode;\n}\n\nexport function SortableHeaderCell<R, SR>({\n  onSort,\n  sortDirection,\n  priority,\n  children,\n  isCellSelected\n}: SortableHeaderCellProps<R, SR>) {\n  const sortIcon = useDefaultComponents<R, SR>()!.sortIcon!;\n\n  function handleKeyDown(event: React.KeyboardEvent<HTMLSpanElement>) {\n    if (event.key === ' ' || event.key === 'Enter') {\n      // stop propagation to prevent scrolling\n      event.preventDefault();\n      onSort(event.ctrlKey || event.metaKey);\n    }\n  }\n\n  function handleClick(event: React.MouseEvent<HTMLSpanElement>) {\n    onSort(event.ctrlKey || event.metaKey);\n  }\n\n  return (\n    <span\n      tabIndex={isCellSelected ? 0 : -1}\n      className={headerSortCellClassname}\n      onClick={handleClick}\n      onKeyDown={handleKeyDown}\n    >\n      <span className={headerSortNameClassname}>{children}</span>\n      <span>\n        {sortIcon({ sortDirection })}\n        {priority}\n      </span>\n    </span>\n  );\n}\n","import { css } from '@linaria/core';\n\nimport type { CalculatedColumn, SortColumn } from './types';\nimport type { HeaderRowProps } from './HeaderRow';\nimport defaultHeaderRenderer from './headerRenderer';\nimport {\n  clampColumnWidth,\n  getCellClassname,\n  getCellStyle,\n  getHeaderCellRowSpan,\n  getHeaderCellStyle\n} from './utils';\nimport { useRovingCellRef } from './hooks';\n\nconst cellResizable = css`\n  touch-action: none;\n\n  &::after {\n    content: '';\n    cursor: col-resize;\n    position: absolute;\n    inset-block-start: 0;\n    inset-inline-end: 0;\n    inset-block-end: 0;\n    inline-size: 10px;\n  }\n`;\n\nconst frozenRightCellResizable = css`\ntouch-action: none;\n\n  &::before {\n    content: '';\n    cursor: col-resize;\n    position: absolute;\n    inset-block-end: 0;\n    inset-inline-start: 0;\n    inset-block-start: 0;\n    inline-size: 10px;\n  }\n`\n\nconst cellResizableClassname = `rdg-cell-resizable ${cellResizable}`;\n\nconst frozenRightResizableClassname = `rdg-cell-resizable ${frozenRightCellResizable}`\n\ntype SharedHeaderRowProps<R, SR> = Pick<\n  HeaderRowProps<R, SR, React.Key>,\n  | 'sortColumns'\n  | 'onSortColumnsChange'\n  | 'allRowsSelected'\n  | 'onAllRowsSelectionChange'\n  | 'selectCell'\n  | 'onColumnResize'\n  | 'shouldFocusGrid'\n  | 'direction'\n>;\n\nexport interface HeaderCellProps<R, SR> extends SharedHeaderRowProps<R, SR> {\n  column: CalculatedColumn<R, SR>;\n  colSpan: number | undefined;\n  rowIdx: number;\n  isCellSelected: boolean;\n}\n\nexport default function HeaderCell<R, SR>({\n  column,\n  colSpan,\n  rowIdx,\n  isCellSelected,\n  onColumnResize,\n  allRowsSelected,\n  onAllRowsSelectionChange,\n  sortColumns,\n  onSortColumnsChange,\n  selectCell,\n  shouldFocusGrid,\n  direction\n}: HeaderCellProps<R, SR>) {\n  const isRtl = direction === 'rtl';\n  const rowSpan = getHeaderCellRowSpan(column, rowIdx);\n  const { tabIndex, onFocus } = useRovingCellRef(isCellSelected);\n  const sortIndex = sortColumns?.findIndex((sort) => sort.columnKey === column.key);\n  const sortColumn =\n    sortIndex !== undefined && sortIndex > -1 ? sortColumns![sortIndex] : undefined;\n  const sortDirection = sortColumn?.direction;\n  const priority = sortColumn !== undefined && sortColumns!.length > 1 ? sortIndex! + 1 : undefined;\n  const ariaSort =\n    sortDirection && !priority ? (sortDirection === 'ASC' ? 'ascending' : 'descending') : undefined;\n\n  const className = getCellClassname(column, column.headerCellClass, {\n    [cellResizableClassname]: column.resizable && (!column.frozen || column.frozenColumnPosition === 'LEFT'),\n    [frozenRightResizableClassname] : column.resizable && column.frozen && column.frozenColumnPosition === 'RIGHT'\n  });\n\n  const headerRenderer = column.headerRenderer ?? defaultHeaderRenderer;\n\n  function onPointerDown(event: React.PointerEvent<HTMLDivElement>) {\n    if (event.pointerType === 'mouse' && event.buttons !== 1) {\n      return;\n    }\n\n    const { currentTarget, pointerId } = event;\n    const { right, left } = currentTarget.getBoundingClientRect();\n    let offset = isRtl || (column.frozen && column.frozenColumnPosition === 'RIGHT') ? event.clientX - left : right - event.clientX;\n    \n\n    if (offset > 11) {\n      // +1px to account for the border size\n      return;\n    }\n\n    function onPointerMove(event: PointerEvent) {\n      const { right, left } = currentTarget.getBoundingClientRect();\n      const width = isRtl || (column.frozen && column.frozenColumnPosition === 'RIGHT') ? right + offset - event.clientX : event.clientX + offset - left;\n      if (width > 0) {\n        onColumnResize(column, clampColumnWidth(width, column));\n      }\n    }\n\n    function onLostPointerCapture() {\n      currentTarget.removeEventListener('pointermove', onPointerMove);\n      currentTarget.removeEventListener('lostpointercapture', onLostPointerCapture);\n    }\n\n    currentTarget.setPointerCapture(pointerId);\n    currentTarget.addEventListener('pointermove', onPointerMove);\n    currentTarget.addEventListener('lostpointercapture', onLostPointerCapture);\n  }\n\n  function onSort(ctrlClick: boolean) {\n    if (onSortColumnsChange == null) return;\n    const { sortDescendingFirst } = column;\n    if (sortColumn === undefined) {\n      // not currently sorted\n      const nextSort: SortColumn = {\n        columnKey: column.key,\n        direction: sortDescendingFirst ? 'DESC' : 'ASC'\n      };\n      onSortColumnsChange(sortColumns && ctrlClick ? [...sortColumns, nextSort] : [nextSort]);\n    } else {\n      let nextSortColumn: SortColumn | undefined;\n      if (\n        (sortDescendingFirst && sortDirection === 'DESC') ||\n        (!sortDescendingFirst && sortDirection === 'ASC')\n      ) {\n        nextSortColumn = {\n          columnKey: column.key,\n          direction: sortDirection === 'ASC' ? 'DESC' : 'ASC'\n        };\n      }\n      if (ctrlClick) {\n        const nextSortColumns = [...sortColumns!];\n        if (nextSortColumn) {\n          // swap direction\n          nextSortColumns[sortIndex!] = nextSortColumn;\n        } else {\n          // remove sort\n          nextSortColumns.splice(sortIndex!, 1);\n        }\n        onSortColumnsChange(nextSortColumns);\n      } else {\n        onSortColumnsChange(nextSortColumn ? [nextSortColumn] : []);\n      }\n    }\n  }\n\n  function onClick() {\n    selectCell({ idx: column.idx, rowIdx });\n  }\n\n  function onDoubleClick(event: React.MouseEvent<HTMLDivElement>) {\n    const { right, left } = event.currentTarget.getBoundingClientRect();\n    const offset = isRtl ? event.clientX - left : right - event.clientX;\n\n    if (offset > 11) {\n      // +1px to account for the border size\n      return;\n    }\n\n    onColumnResize(column, 'max-content');\n  }\n\n  function handleFocus(event: React.FocusEvent<HTMLDivElement>) {\n    onFocus?.(event);\n    if (shouldFocusGrid) {\n      // Select the first header cell if there is no selected cell\n      selectCell({ idx: 0, rowIdx });\n    }\n  }\n\n  return (\n    <div\n      role=\"columnheader\"\n      aria-colspan={colSpan}\n      aria-rowspan={rowSpan}\n      aria-colindex={column.idx + 1}\n      aria-selected={isCellSelected}\n      aria-sort={ariaSort}\n      // set the tabIndex to 0 when there is no selected cell so grid can receive focus\n      tabIndex={shouldFocusGrid ? 0 : tabIndex}\n      className={className}\n      style={{\n        ...getHeaderCellStyle(column, rowIdx,rowSpan),\n        ...getCellStyle(column, colSpan),\n      }}\n      onFocus={handleFocus}\n      onClick={onClick}\n      onDoubleClick={column.resizable ? onDoubleClick : undefined}\n      onPointerDown={column.resizable ? onPointerDown : undefined}\n    >\n      {headerRenderer({\n        column,\n        sortDirection,\n        priority,\n        onSort,\n        allRowsSelected,\n        onAllRowsSelectionChange,\n        isCellSelected\n      })}\n    </div>\n  );\n}\n","import { memo } from 'react';\nimport clsx from 'clsx';\nimport { css } from '@linaria/core';\n\nimport HeaderCell from './HeaderCell';\nimport { getColSpan } from './utils';\nimport type { CalculatedColumn, Direction, Position } from './types';\nimport type { DataGridProps } from './DataGrid';\nimport { cell, cellFrozen, rowSelectedClassname } from './style';\n\ntype SharedDataGridProps<R, SR, K extends React.Key> = Pick<\n  DataGridProps<R, SR, K>,\n  'sortColumns' | 'onSortColumnsChange'\n>;\n\nexport interface HeaderRowProps<R, SR, K extends React.Key> extends SharedDataGridProps<R, SR, K> {\n  rowIdx: number,\n  columns: readonly CalculatedColumn<R, SR>[];\n  allRowsSelected: boolean;\n  onAllRowsSelectionChange: (checked: boolean) => void;\n  onColumnResize: (column: CalculatedColumn<R, SR>, width: number | 'max-content') => void;\n  selectCell: (position: Position) => void;\n  lastFrozenColumnIndex: number;\n  selectedCellIdx: number | undefined;\n  shouldFocusGrid: boolean;\n  direction: Direction;\n}\n\nconst headerRow = css`\n  display: contents;\n  line-height: var(--rdg-header-row-height);\n  background-color: var(--rdg-header-background-color);\n  font-weight: bold;\n\n  & > .${cell} {\n    /* Should have a higher value than 0 to show up above regular cells */\n    z-index: 2;\n    position: sticky;\n  }\n\n  & > .${cellFrozen} {\n    z-index: 3;\n  }\n`;\n\nexport const headerRowClassname = `rdg-header-row ${headerRow}`;\n\nfunction HeaderRow<R, SR, K extends React.Key>({\n  rowIdx,\n  columns,\n  allRowsSelected,\n  onAllRowsSelectionChange,\n  onColumnResize,\n  sortColumns,\n  onSortColumnsChange,\n  lastFrozenColumnIndex,\n  selectedCellIdx,\n  selectCell,\n  shouldFocusGrid,\n  direction\n}: HeaderRowProps<R, SR, K>) {\n  const cells = [];\n  for (let index = 0; index < columns.length; index++) {\n    const column = columns[index];\n    const colSpan = getColSpan(column, lastFrozenColumnIndex, { type: 'HEADER' });\n    if (colSpan !== undefined) {\n      index += colSpan - 1;\n    }\n\n    cells.push(\n      <HeaderCell<R, SR>\n        key={column.key}\n        column={column}\n        colSpan={colSpan}\n        rowIdx={rowIdx}\n        isCellSelected={selectedCellIdx === column.idx}\n        onColumnResize={onColumnResize}\n        allRowsSelected={allRowsSelected}\n        onAllRowsSelectionChange={onAllRowsSelectionChange}\n        onSortColumnsChange={onSortColumnsChange}\n        sortColumns={sortColumns}\n        selectCell={selectCell}\n        shouldFocusGrid={shouldFocusGrid && index === 0}\n        direction={direction}\n      />\n    );\n  }\n\n  return (\n    <div\n      role=\"row\"\n      aria-rowindex={rowIdx} // aria-rowindex is 1 based\n      className={clsx(headerRowClassname, {\n        [rowSelectedClassname]: selectedCellIdx === -1\n      })}\n    >\n      {cells}\n    </div>\n  );\n}\n\nexport default memo(HeaderRow) as <R, SR, K extends React.Key>(\n  props: HeaderRowProps<R, SR, K>\n) => JSX.Element;\n","import { memo } from 'react';\nimport { css } from '@linaria/core';\n\nimport { getCellStyle, getCellClassname, isCellEditable } from './utils';\nimport type { CellRendererProps } from './types';\nimport { useRovingCellRef } from './hooks';\n\nconst cellCopied = css`\n  background-color: #ccccff;\n`;\n\nconst cellCopiedClassname = `rdg-cell-copied ${cellCopied}`;\n\nconst cellDraggedOver = css`\n  background-color: #ccccff;\n\n  &.${cellCopied} {\n    background-color: #9999ff;\n  }\n`;\n\nconst cellDraggedOverClassname = `rdg-cell-dragged-over ${cellDraggedOver}`;\n\nfunction Cell<R, SR>({\n  column,\n  colSpan,\n  isCellSelected,\n  isCopied,\n  isDraggedOver,\n  row,\n  dragHandle,\n  onRowClick,\n  onRowDoubleClick,\n  onRowChange,\n  selectCell,\n  rangeSelectionMode,\n  ...props\n}: CellRendererProps<R, SR>) {\n  const { tabIndex, onFocus } = useRovingCellRef(isCellSelected);\n\n  const { cellClass } = column;\n  const className = getCellClassname(\n    column,\n    {\n      [cellCopiedClassname]: isCopied,\n      [cellDraggedOverClassname]: isDraggedOver\n    },\n    typeof cellClass === 'function' ? cellClass(row) : cellClass\n  );\n\n\n  function onMouseDown(){\n    if(rangeSelectionMode){\n      selectCellWrapper(false);\n      onRowClick?.(row, column);\n    }\n  }\n\n  function selectCellWrapper(openEditor?: boolean | null) {\n    selectCell(row, column, openEditor);\n  }\n\n  function handleClick() {\n    selectCellWrapper(column.editorOptions?.editOnClick);\n    onRowClick?.(row, column);\n  }\n\n  function handleContextMenu() {\n    selectCellWrapper();\n  }\n\n  function handleDoubleClick() {\n    selectCellWrapper(true);\n    onRowDoubleClick?.(row, column);\n  }\n\n  function handleRowChange(newRow: R) {\n    onRowChange(column, newRow);\n  }\n\n  function handleOnFocus(event: React.FocusEvent<HTMLDivElement>) {\n    if(column.editorOptions?.editOnFocus) {\n      selectCellWrapper(column.editorOptions?.editOnFocus);\n    }\n    if(onFocus){\n      onFocus(event);\n    }\n  }\n\n  return (\n    <div\n      role=\"gridcell\"\n      aria-colindex={column.idx + 1} // aria-colindex is 1-based\n      aria-selected={isCellSelected}\n      aria-colspan={colSpan}\n      aria-readonly={!isCellEditable(column, row) || undefined}\n      tabIndex={tabIndex}\n      className={className}\n      style={getCellStyle(column, colSpan)}\n      onClick={handleClick}\n      onDoubleClick={handleDoubleClick}\n      onContextMenu={handleContextMenu}\n      onFocus={handleOnFocus}\n      onMouseDown={onMouseDown}\n      {...props}\n    >\n      {!column.rowGroup && (\n        <>\n          {column.formatter({\n            column,\n            row,\n            isCellSelected,\n            onRowChange: handleRowChange\n          })}\n          {dragHandle}\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default memo(Cell) as <R, SR>(props: CellRendererProps<R, SR>) => JSX.Element;\n","export const isValueInBetween = (value: number, num1: number, num2: number) => {\n    if (num1 >= num2) {\n      return value <= num1 && value >= num2\n    }\n    return value >= num1 && value <= num2\n  }","import { memo, forwardRef } from 'react';\nimport type { RefAttributes } from 'react';\nimport clsx from 'clsx';\n\nimport Cell from './Cell';\nimport { RowSelectionProvider, useLatestFunc } from './hooks';\nimport { getColSpan, getRowStyle } from './utils';\nimport { rowClassname, rowSelectedClassname } from './style';\nimport type { CalculatedColumn, RowRendererProps } from './types';\nimport {isValueInBetween} from \"./utils/Helpers\";\n\n\nfunction Row<R, SR>(\n  {\n    className,\n    rowIdx,\n    gridRowStart,\n    height,\n    selectedCellIdx,\n    selectedCellsRange,\n    isRowSelected,\n    copiedCellIdx,\n    draggedOverCellIdx,\n    lastFrozenColumnIndex,\n    row,\n    viewportColumns,\n    selectedCellEditor,\n    selectedCellDragHandle,\n    onRowClick,\n    onRowDoubleClick,\n    rowClass,\n    setDraggedOverRowIdx,\n    onMouseEnter,\n    onRowChange,\n    onCellMouseDown,\n    onCellMouseUp,\n    onCellMouseEnter,\n    selectCell,\n    rangeSelectionMode,\n    ...props\n  }: RowRendererProps<R, SR>,\n  ref: React.Ref<HTMLDivElement>\n) {\n  const handleRowChange = useLatestFunc((column: CalculatedColumn<R, SR>, newRow: R) => {\n    onRowChange(column, rowIdx, newRow);\n  });\n\n  function handleDragEnter(event: React.MouseEvent<HTMLDivElement>) {\n    setDraggedOverRowIdx?.(rowIdx);\n    onMouseEnter?.(event);\n  }\n\n  className = clsx(\n    rowClassname,\n    `rdg-row-${rowIdx % 2 === 0 ? 'even' : 'odd'}`,\n    {\n      [rowSelectedClassname]: selectedCellIdx === -1\n    },\n    rowClass?.(row),\n    className\n  );\n\n  const cells = [];\n\n  for (let index = 0; index < viewportColumns.length; index++) {\n    const column = viewportColumns[index];\n    const { idx } = column;\n    const colSpan = getColSpan(column, lastFrozenColumnIndex, { type: 'ROW', row });\n    if (colSpan !== undefined) {\n      index += colSpan - 1;\n    }\n\n    const isCellSelected = selectedCellIdx === idx || (rangeSelectionMode && isValueInBetween(idx, selectedCellsRange?.startIdx, selectedCellsRange?.endIdx));\n\n    if (isCellSelected && selectedCellEditor) {\n      cells.push(selectedCellEditor);\n    } else {\n      cells.push(\n        <Cell\n          key={column.key}\n          column={column}\n          colSpan={colSpan}\n          row={row}\n          isCopied={copiedCellIdx === idx}\n          isDraggedOver={draggedOverCellIdx === idx}\n          isCellSelected={isCellSelected}\n          dragHandle={isCellSelected ? selectedCellDragHandle : undefined}\n          onRowClick={onRowClick}\n          onRowDoubleClick={onRowDoubleClick}\n          onRowChange={handleRowChange}\n          selectCell={selectCell}\n          onMouseDownCapture={() => onCellMouseDown?.(row, column)}\n          onMouseUpCapture={() => onCellMouseUp?.(row, column)}\n          onMouseEnter={() => onCellMouseEnter?.(column.idx)}\n          rangeSelectionMode={rangeSelectionMode}\n        />\n      );\n    }\n  }\n\n  return (\n    <RowSelectionProvider value={isRowSelected}>\n      <div\n        role=\"row\"\n        ref={ref}\n        className={className}\n        onMouseEnter={handleDragEnter}\n        style={getRowStyle(gridRowStart, height)}\n        {...props}\n      >\n        {cells}\n      </div>\n    </RowSelectionProvider>\n  );\n}\n\nconst RowComponent = memo(forwardRef(Row)) as <R, SR>(\n  props: RowRendererProps<R, SR> & RefAttributes<HTMLDivElement>\n) => JSX.Element;\n\nexport default RowComponent;\n\nexport function defaultRowRenderer<R, SR>(key: React.Key, props: RowRendererProps<R, SR>) {\n  return <RowComponent key={key} {...props} />;\n}\n","import { memo } from 'react';\n\nimport { getCellStyle, getCellClassname } from './utils';\nimport type { CalculatedColumn, GroupRow } from './types';\nimport type { GroupRowRendererProps } from './GroupRow';\nimport { useRovingCellRef } from './hooks';\n\ntype SharedGroupRowRendererProps<R, SR> = Pick<\n  GroupRowRendererProps<R, SR>,\n  'id' | 'groupKey' | 'childRows' | 'isExpanded' | 'toggleGroup'\n>;\n\ninterface GroupCellProps<R, SR> extends SharedGroupRowRendererProps<R, SR> {\n  column: CalculatedColumn<R, SR>;\n  row: GroupRow<R>;\n  isCellSelected: boolean;\n  groupColumnIndex: number;\n}\n\nfunction GroupCell<R, SR>({\n  id,\n  groupKey,\n  childRows,\n  isExpanded,\n  isCellSelected,\n  column,\n  row,\n  groupColumnIndex,\n  toggleGroup: toggleGroupWrapper\n}: GroupCellProps<R, SR>) {\n  const { tabIndex, onFocus } = useRovingCellRef(isCellSelected);\n\n  function toggleGroup() {\n    toggleGroupWrapper(id);\n  }\n\n  // Only make the cell clickable if the group level matches\n  const isLevelMatching = column.rowGroup && groupColumnIndex === column.idx;\n\n  return (\n    <div\n      role=\"gridcell\"\n      aria-colindex={column.idx + 1}\n      aria-selected={isCellSelected}\n      tabIndex={tabIndex}\n      key={column.key}\n      className={getCellClassname(column)}\n      style={{\n        ...getCellStyle(column),\n        cursor: isLevelMatching ? 'pointer' : 'default'\n      }}\n      onClick={isLevelMatching ? toggleGroup : undefined}\n      onFocus={onFocus}\n    >\n      {(!column.rowGroup || groupColumnIndex === column.idx) &&\n        column.groupFormatter?.({\n          groupKey,\n          childRows,\n          column,\n          row,\n          isExpanded,\n          isCellSelected,\n          toggleGroup\n        })}\n    </div>\n  );\n}\n\nexport default memo(GroupCell) as <R, SR>(props: GroupCellProps<R, SR>) => JSX.Element;\n","import { memo } from 'react';\nimport clsx from 'clsx';\nimport { css } from '@linaria/core';\n\nimport { cell, cellFrozenLast, rowClassname, rowSelectedClassname } from './style';\nimport { SELECT_COLUMN_KEY } from './Columns';\nimport GroupCell from './GroupCell';\nimport type { CalculatedColumn, GroupRow, Omit } from './types';\nimport { RowSelectionProvider } from './hooks';\nimport { getRowStyle } from './utils';\n\nexport interface GroupRowRendererProps<R, SR>\n  extends Omit<React.HTMLAttributes<HTMLDivElement>, 'style' | 'children'> {\n  id: string;\n  groupKey: unknown;\n  viewportColumns: readonly CalculatedColumn<R, SR>[];\n  childRows: readonly R[];\n  rowIdx: number;\n  row: GroupRow<R>;\n  gridRowStart: number;\n  height: number;\n  level: number;\n  selectedCellIdx: number | undefined;\n  isExpanded: boolean;\n  isRowSelected: boolean;\n  selectGroup: (rowIdx: number) => void;\n  toggleGroup: (expandedGroupId: unknown) => void;\n  groupClassName : ((row : GroupRow<R> , groupKey : unknown , childRows : readonly R[]) => string | undefined) | undefined;\n}\n\nconst groupRow = css`\n  &:not([aria-selected='true']) {\n    background-color: var(--rdg-header-background-color);\n  }\n\n  > .${cell}:not(:last-child):not(.${cellFrozenLast}) {\n    border-inline-end: none;\n  }\n`;\n\nconst groupRowClassname = `rdg-group-row ${groupRow}`;\n\nfunction GroupedRow<R, SR>({\n  id,\n  groupKey,\n  viewportColumns,\n  childRows,\n  rowIdx,\n  row,\n  gridRowStart,\n  height,\n  level,\n  isExpanded,\n  selectedCellIdx,\n  isRowSelected,\n  selectGroup,\n  toggleGroup,\n  groupClassName,\n  ...props\n}: GroupRowRendererProps<R, SR>) {\n  // Select is always the first column\n  const idx = viewportColumns[0].key === SELECT_COLUMN_KEY ? level + 1 : level;\n\n  function handleSelectGroup() {\n    selectGroup(rowIdx);\n  }\n\n  return (\n    <RowSelectionProvider value={isRowSelected}>\n      <div\n        role=\"row\"\n        aria-level={level}\n        aria-expanded={isExpanded}\n        className={clsx(\n          rowClassname,\n          groupRowClassname,\n          `rdg-row-${rowIdx % 2 === 0 ? 'even' : 'odd'}`,\n          {\n            [rowSelectedClassname]: selectedCellIdx === -1\n          },\n          groupClassName ? groupClassName(row, groupKey,childRows) : undefined\n          \n        )}\n        onClick={handleSelectGroup}\n        style={getRowStyle(gridRowStart, height)}\n        {...props}\n      >\n        {viewportColumns.map((column) => (\n          <GroupCell\n            key={column.key}\n            id={id}\n            groupKey={groupKey}\n            childRows={childRows}\n            isExpanded={isExpanded}\n            isCellSelected={selectedCellIdx === column.idx}\n            column={column}\n            row={row}\n            groupColumnIndex={idx}\n            toggleGroup={toggleGroup}\n          />\n        ))}\n      </div>\n    </RowSelectionProvider>\n  );\n}\n\nexport default memo(GroupedRow) as <R, SR>(props: GroupRowRendererProps<R, SR>) => JSX.Element;\n","import { memo } from 'react';\nimport { css } from '@linaria/core';\n\nimport { getCellClassname, getSummaryCellStyle } from './utils';\nimport type { CalculatedColumn, CellRendererProps } from './types';\nimport { useRovingCellRef } from './hooks';\n\nexport const summaryCellClassname = css`\n  inset-block-start: var(--rdg-summary-row-top);\n  inset-block-end: var(--rdg-summary-row-bottom);\n`;\n\ninterface SharedCellRendererProps<R, SR>\n  extends Pick<CellRendererProps<R, SR>, 'column' | 'colSpan' | 'isCellSelected'> {\n  selectCell: (row: SR, column: CalculatedColumn<R, SR>) => void;\n}\n\ninterface SummaryCellProps<R, SR> extends SharedCellRendererProps<R, SR> {\n  row: SR;\n \n}\n\nfunction SummaryCell<R, SR>({\n  column,\n  colSpan,\n  row,\n  isCellSelected,\n  selectCell\n  \n}: SummaryCellProps<R, SR>) {\n  const {  tabIndex,onFocus } = useRovingCellRef(isCellSelected);\n  const { summaryCellClass } = column;\n  const className = getCellClassname(\n    column,\n    summaryCellClassname,\n    typeof summaryCellClass === 'function' ? summaryCellClass(row) : summaryCellClass\n  );\n\n  function onClick() {\n    selectCell(row, column);\n  } \n\n  return (\n    <div\n      role=\"gridcell\"\n      aria-colindex={column.idx + 1}\n      aria-colspan={colSpan}\n      aria-selected={isCellSelected}\n      tabIndex={tabIndex}\n      className={className}\n      style={{...getSummaryCellStyle(column, colSpan)}}\n      onClick={onClick}\n      onFocus={onFocus}\n    >\n      {column.summaryFormatter?.({ column, row, isCellSelected })}\n    </div>\n  );\n}\n\nexport default memo(SummaryCell) as <R, SR>(props: SummaryCellProps<R, SR>) => JSX.Element;\n","import { memo } from 'react';\nimport clsx from 'clsx';\nimport { css } from '@linaria/core';\n\nimport { cell, cellFrozen, row, rowClassname, rowSelectedClassname } from './style';\nimport { getColSpan, getRowStyle } from './utils';\nimport SummaryCell from './SummaryCell';\nimport type { CalculatedColumn, RowRendererProps } from './types';\n\ntype SharedRowRendererProps<R, SR> = Pick<\n  RowRendererProps<R, SR>,\n  'viewportColumns' | 'rowIdx' | 'gridRowStart'\n>;\n\ninterface SummaryRowProps<R, SR> extends SharedRowRendererProps<R, SR> {\n  'aria-rowindex': number;\n  row: SR;\n  top: number | undefined;\n  bottom: number | undefined;\n  lastFrozenColumnIndex: number;\n  selectedCellIdx: number | undefined;\n  lastTopRowIdx: number | undefined;\n  selectCell: (row: SR, column: CalculatedColumn<R, SR>) => void;\n}\n\nconst summaryRow = css`\n  &.${row} {\n    line-height: var(--rdg-summary-row-height);\n    > .${cell} {\n      position: sticky;\n    }\n  }\n`;\n\nconst topSummaryRow = css`\n  &.${row} {\n    > .${cell} {\n      z-index: 1;\n    }\n\n    > .${cellFrozen} {\n      z-index: 2;\n    }\n  }\n`;\n\nconst topSummaryRowBorderClassname = css`\n  & > .${cell} {\n    border-block-end: 2px solid var(--rdg-summary-border-color);\n  }\n`;\n\nconst bottomSummaryRowBorderClassname = css`\n  & > .${cell} {\n    border-block-start: 2px solid var(--rdg-summary-border-color);\n  }\n`;\n\nconst summaryRowClassname = `rdg-summary-row ${summaryRow}`;\n\nconst topSummaryRowClassname = `rdg-top-summary-row ${topSummaryRow}`;\n\nfunction SummaryRow<R, SR>({\n  rowIdx,\n  gridRowStart,\n  row,\n  viewportColumns,\n  top,\n  bottom,\n  lastFrozenColumnIndex,\n  selectedCellIdx,\n  lastTopRowIdx,\n  selectCell,\n  'aria-rowindex': ariaRowIndex,\n\n}: SummaryRowProps<R, SR>) {\n  const cells = [];\n  for (let index = 0; index < viewportColumns.length; index++) {\n    const column = viewportColumns[index];\n    const colSpan = getColSpan(column, lastFrozenColumnIndex, { type: 'SUMMARY', row });\n    if (colSpan !== undefined) {\n      index += colSpan - 1;\n    }\n\n    const isCellSelected = selectedCellIdx === column.idx;\n\n    cells.push(\n      <SummaryCell<R, SR>\n        key={column.key}\n        column={column}\n        colSpan={colSpan}\n        row={row}\n        isCellSelected={isCellSelected}\n        selectCell={selectCell}\n      />\n    );\n  }\n\n  const isTop = lastTopRowIdx !== undefined;\n\n  return (\n    <div\n      role=\"row\"\n      aria-rowindex={ariaRowIndex}\n      className={clsx(\n        rowClassname,\n        `rdg-row-${rowIdx % 2 === 0 ? 'even' : 'odd'}`,\n        summaryRowClassname,\n        {\n          [rowSelectedClassname]: selectedCellIdx === -1,\n          [topSummaryRowClassname]: isTop,\n          [topSummaryRowBorderClassname]: isTop && lastTopRowIdx === rowIdx,\n          [bottomSummaryRowBorderClassname]: !isTop && rowIdx === 0,\n          'rdg-bottom-summary-row': !isTop\n        }\n      )}\n      style={\n        {\n          ...getRowStyle(gridRowStart),\n          '--rdg-summary-row-top': top !== undefined ? `${top}px` : undefined,\n          '--rdg-summary-row-bottom': bottom !== undefined ? `${bottom}px` : undefined,\n         \n        } as unknown as React.CSSProperties\n      }\n    >\n      {cells}\n    </div>\n  );\n}\n\nexport default memo(SummaryRow) as <R, SR>(props: SummaryRowProps<R, SR>) => JSX.Element;\n","import { useEffect, useRef } from 'react';\nimport { css } from '@linaria/core';\n\nimport { useLatestFunc } from './hooks';\nimport { getCellStyle, getCellClassname, onEditorNavigation } from './utils';\nimport type { CellRendererProps, EditorProps, Omit } from './types';\n\n/*\n * To check for outside `mousedown` events, we listen to all `mousedown` events at their birth,\n * i.e. on the window during the capture phase, and at their death, i.e. on the window during the bubble phase.\n *\n * We schedule a check at the birth of the event, cancel the check when the event reaches the \"inside\" container,\n * and trigger the \"outside\" callback when the event bubbles back up to the window.\n *\n * The event can be `stopPropagation()`ed halfway through, so they may not always bubble back up to the window,\n * so an alternative check must be used. The check must happen after the event can reach the \"inside\" container,\n * and not before it run to completion. `requestAnimationFrame` is the best way we know how to achieve this.\n * Usually we want click event handlers from parent components to access the latest commited values,\n * so `mousedown` is used instead of `click`.\n *\n * We must also rely on React's event capturing/bubbling to handle elements rendered in a portal.\n */\n\nconst cellEditing = css`\n  &.rdg-cell {\n    padding: 0;\n  }\n`;\n\ntype SharedCellRendererProps<R, SR> = Pick<CellRendererProps<R, SR>, 'colSpan'>;\n\ninterface EditCellProps<R, SR>\nextends Omit<EditorProps<R, SR>, 'onRowChange' | 'onClose'>,\n    SharedCellRendererProps<R, SR> {\n  onRowChange: (row: R, commitChanges: boolean, shouldFocusCell: boolean) => void\n  closeEditor: (shouldFocusCell: boolean) => void;\n}\n\nexport default function EditCell<R, SR>({\n  column,\n  colSpan,\n  row,\n  onRowChange,\n  closeEditor\n}: EditCellProps<R, SR>) {\n  const frameRequestRef = useRef<number | undefined>();\n  const commitOnOutsideClick = column.editorOptions?.commitOnOutsideClick !== false;\n\n  // We need to prevent the `useEffect` from cleaning up between re-renders,\n  // as `onWindowCaptureMouseDown` might otherwise miss valid mousedown events.\n  // To that end we instead access the latest props via useLatestFunc.\n  const commitOnOutsideMouseDown = useLatestFunc(() => {\n    onClose(true, false);\n  });\n\n  useEffect(() => {\n    if (!commitOnOutsideClick) return;\n\n    function onWindowCaptureMouseDown() {\n      frameRequestRef.current = requestAnimationFrame(commitOnOutsideMouseDown);\n    }\n\n    addEventListener('mousedown', onWindowCaptureMouseDown, { capture: true });\n\n    return () => {\n      removeEventListener('mousedown', onWindowCaptureMouseDown, { capture: true });\n      cancelFrameRequest();\n    };\n  }, [commitOnOutsideClick, commitOnOutsideMouseDown]);\n\n  function cancelFrameRequest() {\n    cancelAnimationFrame(frameRequestRef.current!);\n  }\n\n  function onKeyDown(event: React.KeyboardEvent<HTMLDivElement>) {\n    if (event.key === 'Escape') {\n      event.stopPropagation();\n      // Discard changes\n      onClose();\n    } else if (event.key === 'Enter') {\n      event.stopPropagation();\n      onClose(true);\n    } else {\n      const onNavigation = column.editorOptions?.onNavigation ?? onEditorNavigation;\n      if (!onNavigation(event)) {\n        event.stopPropagation();\n      }\n    }\n  }\n\n  function onClose(commitChanges = false, shouldFocusCell = true) {\n    if (commitChanges) {\n      onRowChange(row, true,shouldFocusCell);\n    } else {\n      closeEditor(shouldFocusCell);\n    }\n  }\n\n  function onEditorRowChange(row: R, commitChangesAndFocus = false) {\n    onRowChange(row, commitChangesAndFocus, commitChangesAndFocus);\n  }\n\n \n\n  const { cellClass } = column;\n  const className = getCellClassname(\n    column,\n    'rdg-editor-container',\n    !column.editorOptions?.renderFormatter && cellEditing,\n    typeof cellClass === 'function' ? cellClass(row) : cellClass\n  );\n\n  return (\n    <div\n      role=\"gridcell\"\n      aria-colindex={column.idx + 1} // aria-colindex is 1-based\n      aria-colspan={colSpan}\n      aria-selected\n      className={className}\n      style={getCellStyle(column, colSpan)}\n      onKeyDown={onKeyDown}\n      onMouseDownCapture={commitOnOutsideClick ? cancelFrameRequest : undefined}\n    >\n      {column.editor != null && (\n        <>\n          {column.editor({\n            column,\n            row,\n            onRowChange: onEditorRowChange,\n            onClose\n          })}\n          {column.editorOptions?.renderFormatter &&\n            column.formatter({ column, row, isCellSelected: true, onRowChange : onEditorRowChange })}\n        </>\n      )}\n    </div>\n  );\n}\n","import { css } from '@linaria/core';\n\nimport type { CalculatedColumn, FillEvent, Position } from './types';\nimport type { DataGridProps, SelectCellState } from './DataGrid';\n\nconst cellDragHandle = css`\n  cursor: move;\n  position: absolute;\n  inset-inline-end: 0;\n  inset-block-end: 0;\n  inline-size: 8px;\n  block-size: 8px;\n  background-color: var(--rdg-selection-color);\n\n  &:hover {\n    inline-size: 16px;\n    block-size: 16px;\n    border: 2px solid var(--rdg-selection-color);\n    background-color: var(--rdg-background-color);\n  }\n`;\n\nconst cellDragHandleClassname = `rdg-cell-drag-handle ${cellDragHandle}`;\n\ninterface Props<R, SR> extends Pick<DataGridProps<R, SR>, 'rows' | 'onRowsChange'> {\n  columns: readonly CalculatedColumn<R, SR>[];\n  selectedPosition: SelectCellState;\n  latestDraggedOverRowIdx: React.MutableRefObject<number | undefined>;\n  isCellEditable: (position: Position) => boolean;\n  onFill: (event: FillEvent<R>) => R;\n  setDragging: (isDragging: boolean) => void;\n  setDraggedOverRowIdx: (overRowIdx: number | undefined) => void;\n}\n\nexport default function DragHandle<R, SR>({\n  rows,\n  columns,\n  selectedPosition,\n  latestDraggedOverRowIdx,\n  isCellEditable,\n  onRowsChange,\n  onFill,\n  setDragging,\n  setDraggedOverRowIdx\n}: Props<R, SR>) {\n  function handleMouseDown(event: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (event.buttons !== 1) return;\n    setDragging(true);\n    window.addEventListener('mouseover', onMouseOver);\n    window.addEventListener('mouseup', onMouseUp);\n\n    function onMouseOver(event: MouseEvent) {\n      // Trigger onMouseup in edge cases where we release the mouse button but `mouseup` isn't triggered,\n      // for example when releasing the mouse button outside the iframe the grid is rendered in.\n      // https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/buttons\n      if (event.buttons !== 1) onMouseUp();\n    }\n\n    function onMouseUp() {\n      window.removeEventListener('mouseover', onMouseOver);\n      window.removeEventListener('mouseup', onMouseUp);\n      setDragging(false);\n      handleDragEnd();\n    }\n  }\n\n  function handleDragEnd() {\n    const overRowIdx = latestDraggedOverRowIdx.current;\n    if (overRowIdx === undefined) return;\n\n    const { rowIdx } = selectedPosition;\n    const startRowIndex = rowIdx < overRowIdx ? rowIdx + 1 : overRowIdx;\n    const endRowIndex = rowIdx < overRowIdx ? overRowIdx + 1 : rowIdx;\n    updateRows(startRowIndex, endRowIndex);\n    setDraggedOverRowIdx(undefined);\n  }\n\n  function handleDoubleClick(event: React.MouseEvent<HTMLDivElement>) {\n    event.stopPropagation();\n    updateRows(selectedPosition.rowIdx + 1, rows.length);\n  }\n\n  function updateRows(startRowIdx: number, endRowIdx: number) {\n    const { idx, rowIdx } = selectedPosition;\n    const column = columns[idx];\n    const sourceRow = rows[rowIdx];\n    const updatedRows = [...rows];\n    const indexes: number[] = [];\n    for (let i = startRowIdx; i < endRowIdx; i++) {\n      if (isCellEditable({ rowIdx: i, idx })) {\n        const updatedRow = onFill({ columnKey: column.key, sourceRow, targetRow: rows[i] });\n        if (updatedRow !== rows[i]) {\n          updatedRows[i] = updatedRow;\n          indexes.push(i);\n        }\n      }\n    }\n\n    if (indexes.length > 0) {\n      onRowsChange?.(updatedRows, { indexes, column });\n    }\n  }\n\n  return (\n    <div\n      className={cellDragHandleClassname}\n      onMouseDown={handleMouseDown}\n      onDoubleClick={handleDoubleClick}\n    />\n  );\n}\n","import { css } from '@linaria/core';\nimport type { SortIconProps } from './types';\n\nconst arrow = css`\n  fill: currentColor;\n\n  > path {\n    transition: d 0.1s;\n  }\n`;\n\nconst arrowClassname = `rdg-sort-arrow ${arrow}`;\n\nexport default function sortIcon({ sortDirection }: SortIconProps) {\n  if (sortDirection === undefined) return null;\n\n  return (\n    <svg viewBox=\"0 0 12 8\" width=\"12\" height=\"8\" className={arrowClassname} aria-hidden>\n      <path d={sortDirection === 'ASC' ? 'M0 8 6 0 12 8' : 'M0 0 6 8 12 0'} />\n    </svg>\n  );\n}\n","import { useState } from 'react';\n\n// https://www.w3.org/TR/wai-aria-practices-1.1/#kbd_roving_tabindex\nexport function useRovingTabIndex(isSelected: boolean) {\n  // https://www.w3.org/TR/wai-aria-practices-1.1/#gridNav_focus\n  const [isChildFocused, setIsChildFocused] = useState(false);\n\n  if (isChildFocused && !isSelected) {\n    setIsChildFocused(false);\n  }\n\n  function onFocus(event: React.FocusEvent<HTMLDivElement>) {\n    if (event.target !== event.currentTarget) {\n      setIsChildFocused(true);\n    }\n  }\n\n  const isFocusable = isSelected && !isChildFocused;\n\n  return {\n    tabIndex: isFocusable ? 0 : -1,\n    childTabIndex: isSelected ? 0 : -1,\n    onFocus: isSelected ? onFocus : undefined\n  };\n}","import clsx from 'clsx';\n\nimport { getHeaderCellRowSpan, getHeaderCellStyle } from './utils';\nimport type { CalculatedColumnParent } from './types';\nimport {  GroupedColumnHeaderRowProps } from './GroupedColumnHeaderRow';\nimport { cellClassname } from './style/cell';\nimport { useRovingTabIndex } from './hooks/useRovingTabIndex';\n\ntype SharedGroupedColumnHeaderRowProps<R, SR> = Pick<\n  GroupedColumnHeaderRowProps<R, SR>,\n  'rowIdx' | 'selectCell'\n>;\n\ninterface GroupedColumnHeaderCellProps<R, SR> extends SharedGroupedColumnHeaderRowProps<R, SR> {\n  column: CalculatedColumnParent<R, SR>;\n  isCellSelected: boolean;\n}\n\nexport default function GroupedColumnHeaderCell<R, SR>({\n  column,\n  rowIdx,\n  isCellSelected,\n  selectCell\n}: GroupedColumnHeaderCellProps<R, SR>) {\n  const { tabIndex, onFocus } = useRovingTabIndex(isCellSelected);\n  const { colSpan } = column;\n  const rowSpan = getHeaderCellRowSpan(column, rowIdx);\n  const index = column.idx + 1;\n\n  function onClick() {\n    selectCell({ idx: column.idx, rowIdx });\n  }\n\n  return (\n    <div\n      role=\"columnheader\"\n      aria-colindex={index}\n      aria-colspan={colSpan}\n      aria-rowspan={rowSpan}\n      aria-selected={isCellSelected}\n      tabIndex={tabIndex}\n      className={clsx(cellClassname, column.headerCellClass)}\n      style={{\n        ...getHeaderCellStyle(column, rowIdx, rowSpan),\n        gridColumnStart: index,\n        gridColumnEnd: index + colSpan\n    }}\n    onFocus={onFocus}\n    onClick={onClick}\n  >\n    {column.name}\n  </div>\n\n    );\n}","import { memo } from 'react';\n\nimport type { CalculatedColumn, CalculatedColumnParent, Position } from './types';\nimport GroupedColumnHeaderCell from './GroupedColumnHeaderCell';\nimport { headerRowClassname } from './HeaderRow';\n\nexport interface GroupedColumnHeaderRowProps<R, SR> {\n  rowIdx: number;\n  level: number;\n  columns: readonly CalculatedColumn<R, SR>[];\n  selectCell: (position: Position) => void;\n  selectedCellIdx: number | undefined;\n}\n\nfunction GroupedColumnHeaderRow<R, SR>({\n  rowIdx,\n  level,\n  columns,\n  selectedCellIdx,\n  selectCell\n}: GroupedColumnHeaderRowProps<R, SR>) {\n  const cells = [];\n  const renderedParents = new Set<CalculatedColumnParent<R, SR>>();\n\n  for (const column of columns) {\n    let { parent } = column;\n\n    if (parent === undefined) continue;\n\n    while (parent.level > level) {\n      if (parent.parent === undefined) break;\n      parent = parent.parent;\n    }\n\n    if (parent.level === level && !renderedParents.has(parent)) {\n      renderedParents.add(parent);\n      const { idx } = parent;\n      cells.push(\n        <GroupedColumnHeaderCell<R, SR>\n          key={idx}\n          column={parent}\n          rowIdx={rowIdx}\n          isCellSelected={selectedCellIdx === idx}\n          selectCell={selectCell}\n        />\n      );\n    }\n  }\n\n  return (\n    <div\n      role=\"row\"\n      aria-rowindex={rowIdx} // aria-rowindex is 1 based\n      className={headerRowClassname}\n    >\n      {cells}\n    </div>\n  );\n}\n\nexport default memo(GroupedColumnHeaderRow) as <R, SR>(\n  props: GroupedColumnHeaderRowProps<R, SR>\n) => JSX.Element;","import { forwardRef, useState, useRef, useImperativeHandle, useCallback, useMemo } from 'react';\nimport type { Key, RefAttributes } from 'react';\nimport clsx from 'clsx';\n\nimport {\n  rootClassname,\n  viewportDraggingClassname,\n} from './style';\nimport {\n  useColumnWidths,\n  useLayoutEffect,\n  useGridDimensions,\n  useCalculatedColumns,\n  useViewportColumns,\n  useViewportRows,\n  useLatestFunc,\n  RowSelectionChangeProvider\n} from './hooks';\nimport type { PartialPosition } from './ScrollToCell';\nimport ScrollToCell from './ScrollToCell';\nimport HeaderRow from './HeaderRow';\nimport { defaultRowRenderer } from './Row';\nimport GroupRowRenderer from './GroupRow';\nimport SummaryRow from './SummaryRow';\nimport EditCell from './EditCell';\nimport DragHandle from './DragHandle';\nimport { default as defaultSortIcon } from './sortIcon';\nimport { checkboxFormatter as defaultCheckboxFormatter } from './formatters';\nimport {\n  DataGridDefaultComponentsProvider,\n  useDefaultComponents\n} from './DataGridDefaultComponentsProvider';\nimport {\n  assertIsValidKeyGetter,\n  getNextSelectedCellPosition,\n  isSelectedCellEditable,\n  canExitGrid,\n  isCtrlKeyHeldDown,\n  isDefaultCellInput,\n  getColSpan,\n  sign,\n  abs,\n  getSelectedCellColSpan,\n  scrollIntoView,\n  renderMeasuringCells\n} from './utils';\n\nimport type {\n  CalculatedColumn,\n  Column,\n  Position,\n  RowsChangeData,\n  SelectRowEvent,\n  FillEvent,\n  ColumnOrColumnGroup,\n  CopyEvent,\n  PasteEvent,\n  CellNavigationMode,\n  SortColumn,\n  RowHeightArgs,\n  Maybe,\n  Renderers,\n  Direction,\n  MultiPasteEvent, CellsRange, MultiCopyEvent , GroupRow\n} from './types';\nimport {isValueInBetween} from \"./utils/Helpers\";\n  import GroupedColumnHeaderRow from './GroupedColumnHeaderRow';\n\nexport interface SelectCellState extends Position {\n  readonly mode: 'SELECT';\n}\n\nconst initialSelectedRange: CellsRange = {\n  startRowIdx: -1,\n  startColumnIdx: -1,\n  endRowIdx: -1,\n  endColumnIdx: -1,\n};\n\ninterface EditCellState<R> extends Position {\n  readonly mode: 'EDIT';\n  readonly row: R;\n  readonly originalRow: R;\n}\n\ntype DefaultColumnOptions<R, SR> = Pick<\n  Column<R, SR>,\n  'formatter' | 'width' | 'minWidth' | 'maxWidth' | 'resizable' | 'sortable'\n>;\n\nconst initialPosition: SelectCellState = {\n  idx: -1,\n  rowIdx: -2,\n  mode: 'SELECT'\n};\n\nexport interface DataGridHandle {\n  element: HTMLDivElement | null;\n  /* @depreciated use scrollToCell\n   */\n  scrollToColumn: (colIdx: number) => void;\n  scrollToCell: (position: PartialPosition) => void;\n  /* @depreciated use scrollToCell\n   */\n  scrollToRow: (rowIdx: number) => void;\n  selectCell: (position: Position, enableEditor?: Maybe<boolean>) => void;\n  deselectCell : () => void;\n  getColumnIdx : (key: string) => number | undefined;\n  reCalculateColumnWidths : () => void;\n  onMultiPaste?: Maybe<(event: MultiPasteEvent) => void>;\n  onMultiCopy?: Maybe<(event: MultiCopyEvent) => void>;\n  onMultiCopySuccess?: Maybe<(copiedText: string) => void>;\n  onMultiCopyFail?: Maybe<(copiedText: string) => void>;\n\n}\n\ntype SharedDivProps = Pick<\n  React.HTMLAttributes<HTMLDivElement>,\n  'aria-label' | 'aria-labelledby' | 'aria-describedby' | 'className' | 'style'\n>;\n\nexport interface DataGridProps<R, SR = unknown, K extends Key = Key> extends SharedDivProps {\n  /**\n   * Grid and data Props\n   */\n  /** An array of objects representing each column on the grid */\n  columns: readonly ColumnOrColumnGroup<R, SR>[];\n  /** A function called for each rendered row that should return a plain key/value pair object */\n  rows: readonly R[];\n  /**\n   * Rows to be pinned at the top of the rows view for summary, the vertical scroll bar will not scroll these rows.\n   */\n  topSummaryRows?: Maybe<readonly SR[]>;\n  /**\n   * Rows to be pinned at the bottom of the rows view for summary, the vertical scroll bar will not scroll these rows.\n   */\n  bottomSummaryRows?: Maybe<readonly SR[]>;\n  /** The getter should return a unique key for each row */\n  rowKeyGetter?: Maybe<(row: R) => K>;\n  onRowsChange?: Maybe<(rows: R[], data: RowsChangeData<R, SR>) => void>;\n\n  /**\n   * Dimensions props\n   */\n  /**\n   * The height of each row in pixels\n   * @default 35\n   */\n  rowHeight?: Maybe<number | ((args: RowHeightArgs<R>) => number)>;\n  /**\n   * The height of the header row in pixels\n   * @default 35\n   */\n  headerRowHeight?: Maybe<number>;\n  /**\n   * The height of each summary row in pixels\n   * @default 35\n   */\n  summaryRowHeight?: Maybe<number>;\n\n  /**\n   * Feature props\n   */\n  /** Set of selected row keys */\n  selectedRows?: Maybe<ReadonlySet<K>>;\n  /** Function called whenever row selection is changed */\n  onSelectedRowsChange?: Maybe<(selectedRows: Set<K>) => void>;\n  /** Used for multi column sorting */\n  sortColumns?: Maybe<readonly SortColumn[]>;\n  onSortColumnsChange?: Maybe<(sortColumns: SortColumn[]) => void>;\n  defaultColumnOptions?: Maybe<DefaultColumnOptions<R, SR>>;\n  groupBy?: Maybe<readonly string[]>;\n  rowGrouper?: Maybe<(rows: readonly R[], columnKey: string) => Record<string, readonly R[]>>;\n  expandedGroupIds?: Maybe<ReadonlySet<unknown>>;\n  onExpandedGroupIdsChange?: Maybe<(expandedGroupIds: Set<unknown>) => void>;\n  onFill?: Maybe<(event: FillEvent<R>) => R>;\n  onCopy?: Maybe<(event: CopyEvent<R>) => void>;\n  onPaste?: Maybe<(event: PasteEvent<R>) => R>;\n  onMultiPaste?: Maybe<(event: MultiPasteEvent) => void>;\n  onMultiCopy?: Maybe<(event: MultiCopyEvent) => void>;\n  onMultiCopySuccess?: Maybe<(copiedText: string) => void>;\n  onMultiCopyFail?: Maybe<(copiedText: string) => void>;\n\n  /**\n   * Event props\n   */\n  /** Function called whenever a row is clicked */\n  onRowClick?: Maybe<(row: R, column: CalculatedColumn<R, SR>) => void>;\n  /** Function called whenever a row is double clicked */\n  onRowDoubleClick?: Maybe<(row: R, column: CalculatedColumn<R, SR>) => void>;\n  /** Called when the grid is scrolled */\n  onScroll?: Maybe<(event: React.UIEvent<HTMLDivElement>) => void>;\n  /** Called when a column is resized */\n  onColumnResize?: Maybe<(idx: number, width: number) => void>;\n\n\n\n  /**\n   * Toggles and modes\n   */\n  /** @default 'NONE' */\n  cellNavigationMode?: Maybe<CellNavigationMode>;\n  /** @default true */\n  enableVirtualization?: Maybe<boolean>;\n  /** @default true */\n  enableColumnVirtualization?: Maybe<boolean>;\n\n  /** @default false, set true to enable range selection with copy and paste through clipboard */\n  enableRangeSelection?: Maybe<boolean>\n\n  /**\n   * Miscellaneous\n   */\n  renderers?: Maybe<Renderers<R, SR>>;\n  rowClass?: Maybe<(row: R) => Maybe<string>>;\n  parentRowGroupClass?: Maybe<(row: GroupRow<R>, groupKey: unknown, childRows : readonly R[]) => string>;\n  direction?: Maybe<Direction>;\n  'data-testid'?: Maybe<string>;\n}\n\n/**\n * Main API Component to render a data grid of rows and columns\n *\n * @example\n *\n * <DataGrid columns={columns} rows={rows} />\n */\nfunction DataGrid<R, SR, K extends Key>(\n  {\n    // Grid and data Props\n    columns: rawColumns,\n    rows: rawRows,\n    topSummaryRows,\n    bottomSummaryRows,\n    rowKeyGetter,\n    onRowsChange,\n    // Dimensions props\n    rowHeight,\n    headerRowHeight: rawHeaderRowHeight,\n    summaryRowHeight: rawSummaryRowHeight,\n    // Feature props\n    selectedRows,\n    onSelectedRowsChange,\n    sortColumns,\n    onSortColumnsChange,\n    defaultColumnOptions,\n    groupBy: rawGroupBy,\n    rowGrouper,\n    expandedGroupIds,\n    onExpandedGroupIdsChange,\n    // Event props\n    onRowClick,\n    onRowDoubleClick,\n    onScroll,\n    onColumnResize,\n    onFill,\n    onCopy,\n    onPaste,\n    onMultiPaste,\n    onMultiCopy,\n    // Toggles and modes\n    cellNavigationMode: rawCellNavigationMode,\n    enableVirtualization,\n    enableRangeSelection,\n    enableColumnVirtualization,\n    // Miscellaneous\n    renderers,\n    className,\n    style,\n    rowClass,\n    parentRowGroupClass,\n    direction,\n    // ARIA\n    'aria-label': ariaLabel,\n    'aria-labelledby': ariaLabelledBy,\n    'aria-describedby': ariaDescribedBy,\n    'data-testid': testId\n  }: DataGridProps<R, SR, K>,\n  ref: React.Ref<DataGridHandle>\n) {\n  /**\n   * defaults\n   */\n  const defaultComponents = useDefaultComponents<R, SR>();\n  rowHeight ??= 35;\n  const headerRowHeight = rawHeaderRowHeight ?? (typeof rowHeight === 'number' ? rowHeight : 35);\n  const summaryRowHeight = rawSummaryRowHeight ?? (typeof rawSummaryRowHeight === 'number' ? rawSummaryRowHeight : 35);\n  const parentRowGroupClassFunction = parentRowGroupClass ?? parentRowGroupClass;\n  const rowRenderer =\n    renderers?.rowRenderer ?? defaultComponents?.rowRenderer ?? defaultRowRenderer;\n  const sortIcon = renderers?.sortIcon ?? defaultComponents?.sortIcon ?? defaultSortIcon;\n  const checkboxFormatter =\n    renderers?.checkboxFormatter ??\n    defaultComponents?.checkboxFormatter ??\n    defaultCheckboxFormatter;\n  const noRowsFallback = renderers?.noRowsFallback ?? defaultComponents?.noRowsFallback;\n  const cellNavigationMode = rawCellNavigationMode ?? 'NONE';\n  enableVirtualization ??= true;\n  enableColumnVirtualization ??= true;\n  enableRangeSelection ??= false;\n  direction ??= 'ltr';\n\n  /**\n   * states\n   */\n  const [scrollTop, setScrollTop] = useState(0);\n  const [scrollLeft, setScrollLeft] = useState(0);\n  const [resizedColumnWidths, setResizedColumnWidths] = useState(\n    (): ReadonlyMap<string, number> => new Map()\n  );\n  const [measuredColumnWidths, setMeasuredColumnWidths] = useState(\n    (): ReadonlyMap<string, number> => new Map()\n  );\n\n\n  const [selectedRange, setSelectedRange] = useState<CellsRange>(initialSelectedRange);\n  const [copiedRange, setCopiedRange] = useState<CellsRange | null>(null);\n  \n  const [copiedCell, setCopiedCell] = useState<{ row: R; columnKey: string } | null>(null);\n  const [isDragging, setDragging] = useState(false);\n  const [draggedOverRowIdx, setOverRowIdx] = useState<number | undefined>(undefined);\n  const [scrollToPosition, setScrollToPosition] = useState<PartialPosition | null>(null);\n\n  const [gridRef, gridWidth, gridHeight] = useGridDimensions();\n\n  const {\n    columns,\n    colSpanColumns,\n    headerRowsCount,\n    colOverscanStartIdx,\n    colOverscanEndIdx,\n    templateColumns,\n    layoutCssVars,\n    columnMetrics,\n    lastFrozenColumnIndex,\n    totalFrozenColumnWidth,\n    totalRightFrozenColumnWidth,\n    firstRightFrozenColumnIndex,\n    groupBy\n  } = useCalculatedColumns({\n    rawColumns,\n    measuredColumnWidths,\n    resizedColumnWidths,\n    scrollLeft,\n    viewportWidth: gridWidth,\n    defaultColumnOptions,\n    rawGroupBy: rowGrouper ? rawGroupBy : undefined,\n    enableVirtualization : enableColumnVirtualization\n  });\n\n\n  \n\n\n  /**\n   * computed values\n   */\n\n  const topSummaryRowsCount = topSummaryRows?.length ?? 0;\n  const bottomSummaryRowsCount = bottomSummaryRows?.length ?? 0;\n  const summaryRowsCount = topSummaryRowsCount + bottomSummaryRowsCount;\n\n  const headerAndTopSummaryRowsCount = headerRowsCount + topSummaryRowsCount;\n  const groupedColumnHeaderRowsCount = headerRowsCount - 1;\n  const minRowIdx = -headerAndTopSummaryRowsCount;\n  const mainHeaderRowIdx = minRowIdx + groupedColumnHeaderRowsCount;\n  const maxRowIdx = rawRows.length + bottomSummaryRowsCount - 1;\n\n  const [selectedPosition, setSelectedPosition] = useState<SelectCellState | EditCellState<R>>(\n    () => ({ idx: -1, rowIdx: minRowIdx - 1, mode: 'SELECT' })\n  );\n\n  /**\n   * refs\n   */\n    const prevSelectedPosition = useRef(selectedPosition);\n   const latestDraggedOverRowIdx = useRef(draggedOverRowIdx);\n   const lastSelectedRowIdx = useRef(-1);\n   const shouldFocusCellRef = useRef(false);\n\n\n\n\n\n  const headerRowsHeight = headerRowsCount * headerRowHeight;\n  const clientHeight = gridHeight - headerRowsHeight - summaryRowsCount * summaryRowHeight;\n\n  const isSelectable = selectedRows != null && onSelectedRowsChange != null;\n  const isRtl = direction === 'rtl';\n  const leftKey = isRtl ? 'ArrowRight' : 'ArrowLeft';\n  const rightKey = isRtl ? 'ArrowLeft' : 'ArrowRight';\n\n  const defaultGridComponents = useMemo(\n    () => ({\n      sortIcon,\n      checkboxFormatter\n    }),\n    [sortIcon, checkboxFormatter]\n  );\n\n  const allRowsSelected = useMemo((): boolean => {\n    // no rows to select = explicitely unchecked\n    const { length } = rawRows;\n    return (\n      length !== 0 &&\n      selectedRows != null &&\n      rowKeyGetter != null &&\n      selectedRows.size >= length &&\n      rawRows.every((row) => selectedRows.has(rowKeyGetter(row)))\n    );\n  }, [rawRows, selectedRows, rowKeyGetter]);\n\n  \n\n  const {\n    rowOverscanStartIdx,\n    rowOverscanEndIdx,\n    rows,\n    rowsCount,\n    totalRowHeight,\n    isGroupRow,\n    getRowTop,\n    getRowHeight,\n    findRowIdx,\n    topFillerHeight,\n    bottomFillerHeight,\n  } = useViewportRows({\n    rawRows,\n    groupBy,\n    rowGrouper,\n    rowHeight,\n    clientHeight,\n    scrollTop,\n    expandedGroupIds,\n    enableVirtualization\n  });\n\n  const viewportColumns = useViewportColumns({\n    columns,\n    colSpanColumns,\n    colOverscanStartIdx,\n    colOverscanEndIdx,\n    lastFrozenColumnIndex,\n    firstRightFrozenColumnIndex,\n    rowOverscanStartIdx,\n    rowOverscanEndIdx,\n    rows,\n    topSummaryRows,\n    bottomSummaryRows,\n    isGroupRow\n  });\n\n  const { gridTemplateColumns, handleColumnResize }  = useColumnWidths(\n    columns,\n    viewportColumns,\n    templateColumns,\n    gridRef,\n    gridWidth,\n    resizedColumnWidths,\n    measuredColumnWidths,\n    setResizedColumnWidths,\n    setMeasuredColumnWidths,\n    onColumnResize\n  );\n\n \n\n  const hasGroups = groupBy.length > 0 && typeof rowGrouper === 'function';\n  const minColIdx = hasGroups ? -1 : 0;\n  const maxColIdx = columns.length - 1;\n  const selectedCellIsWithinSelectionBounds = isCellWithinSelectionBounds(selectedPosition);\n  const selectedCellIsWithinViewportBounds = isCellWithinViewportBounds(selectedPosition);\n\n  /**\n   * The identity of the wrapper function is stable so it won't break memoization\n   */\n  const selectRowLatest = useLatestFunc(selectRow);\n  const selectAllRowsLatest = useLatestFunc(selectAllRows);\n  const handleFormatterRowChangeLatest = useLatestFunc(updateRow);\n  const selectViewportCellLatest = (row: R, column: CalculatedColumn<R, SR>, enableEditor: Maybe<boolean>) => {\n      const rowIdx = rows.indexOf(row);\n      selectCell({ rowIdx, idx: column.idx }, enableEditor);\n    }\n  \n  const selectGroupLatest = useLatestFunc((rowIdx: number) => {\n    selectCell({ rowIdx, idx: -1 });\n  });\n  const selectHeaderCellLatest = useLatestFunc(({ idx, rowIdx }: Position) => {\n    selectCell({ rowIdx: minRowIdx + rowIdx - 1, idx });\n  });\n  /* const selectTopSummaryCellLatest = useLatestFunc(\n    (summaryRow: SR, column: CalculatedColumn<R, SR>) => {\n      const rowIdx = topSummaryRows!.indexOf(summaryRow);\n      selectCell({ rowIdx: rowIdx + minRowIdx + 1, idx: column.idx });\n    }\n  );\n  const selectBottomSummaryCellLatest = useLatestFunc(\n    (summaryRow: SR, column: CalculatedColumn<R, SR>) => {\n      const rowIdx = bottomSummaryRows!.indexOf(summaryRow) + rows.length;\n      selectCell({ rowIdx, idx: column.idx });\n    }\n  ); */\n  const toggleGroupLatest = useLatestFunc(toggleGroup);\n\n  /**\n   * effects\n   */\n\n  \n\n\n  useLayoutEffect(() => {\n    if (\n      !selectedCellIsWithinSelectionBounds ||\n      isSamePosition(selectedPosition, prevSelectedPosition.current)\n    ) {\n      prevSelectedPosition.current = selectedPosition;\n      return;\n    }\n\n    prevSelectedPosition.current = selectedPosition;\n\n    /* if (selectedPosition.idx === -1) {\n      rowRef.current!.focus({ preventScroll: true });\n      scrollIntoView(rowRef.current);\n    } */\n  });\n\n \n\n\n  useLayoutEffect(() => {\n    if (!shouldFocusCellRef.current) return;\n    shouldFocusCellRef.current = false;\n    const cells = gridRef.current!.querySelectorAll<HTMLDivElement>('.rdg-cell[tabindex=\"0\"]');\n    if (cells.length === 0) return;\n\n    const cell =\n      cells.length === 1\n        ? cells[0]\n        : Array.from(cells).find((cell) => cell.closest('.rdg') === gridRef.current)!;\n\n    scrollIntoView(cell);\n    // Focus cell content when available instead of the cell itself\n    const elementToFocus = cell.querySelector<Element & HTMLOrSVGElement>('[tabindex=\"0\"]') ?? cell;\n    elementToFocus.focus({ preventScroll: true });\n  });\n\n\n  useLayoutEffect(() => {\n    if (!shouldFocusCellRef.current) return;\n    shouldFocusCellRef.current = false;\n    const cells = gridRef.current!.querySelectorAll<HTMLDivElement>('.rdg-cell[tabindex=\"0\"]');\n    if (cells.length === 0) return;\n\n    const cell =\n      cells.length === 1\n        ? cells[0]\n        : Array.from(cells).find((cell) => cell.closest('.rdg') === gridRef.current)!;\n\n    scrollIntoView(cell);\n    // Focus cell content when available instead of the cell itself\n    const elementToFocus = cell.querySelector<Element & HTMLOrSVGElement>('[tabindex=\"0\"]') ?? cell;\n    elementToFocus.focus({ preventScroll: true });\n  });\n\n  useImperativeHandle(ref, () => ({\n    element: gridRef.current,\n    scrollToColumn,\n    scrollToRow(rowIdx: number) {\n      const { current } = gridRef;\n      if (!current) return;\n      current.scrollTo({\n        top: getRowTop(rowIdx),\n        behavior: 'smooth'\n      });\n    },\n    scrollToCell({ idx, rowIdx }) {\n      const scrollToIdx =\n        idx !== undefined && idx > lastFrozenColumnIndex && idx < columns.length ? idx : undefined;\n      const scrollToRowIdx =\n        rowIdx !== undefined && isRowIdxWithinViewportBounds(rowIdx) ? rowIdx : undefined;\n\n      if (scrollToIdx !== undefined || scrollToRowIdx !== undefined) {\n        setScrollToPosition({ idx: scrollToIdx, rowIdx: scrollToRowIdx });\n      }\n    },\n    selectCell,\n    deselectCell,\n    getColumnIdx: (key) => {\n      return [...columns].find(column => column.key == key)?.idx;\n\n    },\n    getColumns : () => {\n      return [...columns];\n    },\n    reCalculateColumnWidths : () => {\n      setMeasuredColumnWidths((): ReadonlyMap<string, number> => new Map());\n      setResizedColumnWidths( (): ReadonlyMap<string, number> => new Map());\n    }\n  }));\n\n  \n  \n\n  const setDraggedOverRowIdx = useCallback((rowIdx?: number) => {\n    setOverRowIdx(rowIdx);\n    latestDraggedOverRowIdx.current = rowIdx;\n  }, []);\n\n  /**\n   * event handlers\n   */\n  function selectRow({ row, checked, isShiftClick }: SelectRowEvent<R>) {\n    if (!onSelectedRowsChange) return;\n\n    assertIsValidKeyGetter<R, K>(rowKeyGetter);\n    const newSelectedRows = new Set(selectedRows);\n    if (isGroupRow(row)) {\n      for (const childRow of row.childRows) {\n        const rowKey = rowKeyGetter(childRow);\n        if (checked) {\n          newSelectedRows.add(rowKey);\n        } else {\n          newSelectedRows.delete(rowKey);\n        }\n      }\n      onSelectedRowsChange(newSelectedRows);\n      return;\n    }\n\n    const rowKey = rowKeyGetter(row);\n    if (checked) {\n      newSelectedRows.add(rowKey);\n      const previousRowIdx = lastSelectedRowIdx.current;\n      const rowIdx = rows.indexOf(row);\n      lastSelectedRowIdx.current = rowIdx;\n      if (isShiftClick && previousRowIdx !== -1 && previousRowIdx !== rowIdx) {\n        const step = sign(rowIdx - previousRowIdx);\n        for (let i = previousRowIdx + step; i !== rowIdx; i += step) {\n          const row = rows[i];\n          if (isGroupRow(row)) continue;\n          newSelectedRows.add(rowKeyGetter(row));\n        }\n      }\n    } else {\n      newSelectedRows.delete(rowKey);\n      lastSelectedRowIdx.current = -1;\n    }\n\n    onSelectedRowsChange(newSelectedRows);\n  }\n\n  function selectAllRows(checked: boolean) {\n    if (!onSelectedRowsChange) return;\n\n    assertIsValidKeyGetter<R, K>(rowKeyGetter);\n    const newSelectedRows = new Set(selectedRows);\n\n    for (const row of rawRows) {\n      const rowKey = rowKeyGetter(row);\n      if (checked) {\n        newSelectedRows.add(rowKey);\n      } else {\n        newSelectedRows.delete(rowKey);\n      }\n    }\n\n    onSelectedRowsChange(newSelectedRows);\n  }\n\n  function toggleGroup(expandedGroupId: unknown) {\n    if (!onExpandedGroupIdsChange) return;\n    const newExpandedGroupIds = new Set(expandedGroupIds);\n    if (newExpandedGroupIds.has(expandedGroupId)) {\n      newExpandedGroupIds.delete(expandedGroupId);\n    } else {\n      newExpandedGroupIds.add(expandedGroupId);\n    }\n    onExpandedGroupIdsChange(newExpandedGroupIds);\n  }\n\n  function handleKeyDown(event: React.KeyboardEvent<HTMLDivElement>) {\n    if (!(event.target instanceof Element)) return;\n    const isCellEvent = event.target.closest('.rdg-cell') !== null;\n   //const isRowEvent = hasGroups && event.target === rowRef.current;\n    if (!isCellEvent) return;\n\n    const { key, keyCode } = event;\n    const { rowIdx } = selectedPosition;\n\n    if (\n      selectedCellIsWithinViewportBounds &&\n      (onPaste != null || onCopy != null || onMultiCopy != null || onMultiPaste != null) &&\n      isCtrlKeyHeldDown(event) &&\n      !isGroupRow(rows[rowIdx]) &&\n      selectedPosition.mode === 'SELECT'\n    ) {\n      // event.key may differ by keyboard input language, so we use event.keyCode instead\n      // event.nativeEvent.code cannot be used either as it would break copy/paste for the DVORAK layout\n      const cKey = 67;\n      const vKey = 86;\n      if (keyCode === cKey) {\n        handleCopy();\n        return;\n      }\n      if (keyCode === vKey) {\n        handlePaste();\n        return;\n      }\n    }\n\n    if (isRowIdxWithinViewportBounds(rowIdx)) {\n      const row = rows[rowIdx];\n\n      if (\n        isGroupRow(row) &&\n        selectedPosition.idx === -1 &&\n        // Collapse the current group row if it is focused and is in expanded state\n        ((key === leftKey && row.isExpanded) ||\n          // Expand the current group row if it is focused and is in collapsed state\n          (key === rightKey && !row.isExpanded))\n      ) {\n        event.preventDefault(); // Prevents scrolling\n        toggleGroup(row.id);\n        return;\n      }\n    }\n\n    if(event.shiftKey){\n      let scrollPostion : PartialPosition = {}\n      switch (event.key) {\n        case 'ArrowUp':\n          if (selectedRange.endRowIdx > 0) {\n            scrollPostion =  {\n              idx : undefined,\n              rowIdx :selectedRange.endRowIdx - 1\n            }\n            setScrollToPosition(scrollPostion);\n            setSelectedRange({...selectedRange, endRowIdx: selectedRange.endRowIdx - 1})\n          }\n          return;\n        case 'ArrowDown':\n\n          if (selectedRange.endRowIdx < rows.length - 1) {\n            scrollPostion =  {\n              idx : undefined,\n              rowIdx :selectedRange.endRowIdx + 1\n            }\n            setScrollToPosition(scrollPostion);\n            setSelectedRange({...selectedRange, endRowIdx: selectedRange.endRowIdx + 1})\n          }\n          return;\n        case 'ArrowRight':\n          if (selectedRange.endColumnIdx < columns.length - 1) {\n            scrollPostion =  {\n              idx : selectedRange.endColumnIdx+1,\n              rowIdx :undefined \n            }\n            setScrollToPosition(scrollPostion);\n            setSelectedRange({...selectedRange, endColumnIdx: selectedRange.endColumnIdx + 1})\n          }\n          return;\n        case 'ArrowLeft':\n          if (selectedRange.endColumnIdx > 0) {\n            scrollPostion =  {\n              idx : selectedRange.endColumnIdx-1,\n              rowIdx :undefined\n            }\n            setScrollToPosition(scrollPostion);\n            setSelectedRange({...selectedRange, endColumnIdx: selectedRange.endColumnIdx - 1})\n          }\n          return;\n        default:\n          break;\n      }\n    }\n\n    switch (event.key) {\n      case 'Escape':\n        setCopiedCell(null);\n        return;\n      case 'ArrowUp':\n      case 'ArrowDown':\n      case 'ArrowLeft':\n      case 'ArrowRight':\n      case 'Tab':\n      case 'Home':\n      case 'End':\n      case 'PageUp':\n      case 'PageDown':\n        navigate(event);\n        break;\n      default:\n        handleCellInput(event);\n        break;\n    }\n  }\n\n  function handleScroll(event: React.UIEvent<HTMLDivElement>) {\n    const { scrollTop, scrollLeft } = event.currentTarget;\n    setScrollTop(scrollTop);\n    // scrollLeft is nagative when direction is rtl\n    setScrollLeft(abs(scrollLeft));\n    onScroll?.(event);\n  }\n\n  function getRawRowIdx(rowIdx: number) {\n    return hasGroups ? rawRows.indexOf(rows[rowIdx] as R) : rowIdx;\n  }\n\n  function updateRow(column: CalculatedColumn<R, SR>, rowIdx: number, row: R) {\n    if (typeof onRowsChange !== 'function') return;\n    const rawRowIdx = getRawRowIdx(rowIdx);\n    if (row === rawRows[rawRowIdx]) return;\n    const updatedRows = [...rawRows];\n    updatedRows[rawRowIdx] = row;\n    onRowsChange(updatedRows, {\n      indexes: [rawRowIdx],\n      column\n    });\n  }\n\n  function commitEditorChanges() {\n    if (selectedPosition.mode !== 'EDIT') return;\n    updateRow(columns[selectedPosition.idx], selectedPosition.rowIdx, selectedPosition.row);\n  }\n\n  function handleCopy() {\n\n    if(enableRangeSelection){\n      setCopiedRange(selectedRange)\n      onMultiCopy?.({cellsRange: selectedRange})\n    } else {\n      const { idx, rowIdx } = selectedPosition;\n      const sourceRow = rawRows[getRawRowIdx(rowIdx)];\n      const sourceColumnKey = columns[idx].key;\n      setCopiedCell({ row: sourceRow, columnKey: sourceColumnKey });\n      onCopy?.({ sourceRow, sourceColumnKey });\n\n    }\n  }\n\n  function handlePaste() {\n    if (enableRangeSelection) {\n      if (!onMultiPaste || !onRowsChange || copiedRange === null) {\n        return;\n      }\n      onMultiPaste({\n        copiedRange,\n        targetRange: selectedRange\n      })\n    } else {\n      if (!onPaste || !onRowsChange || copiedCell === null || !isCellEditable(selectedPosition)) {\n        return;\n      }\n  \n      const { idx, rowIdx } = selectedPosition;\n      const targetColumn = columns[idx];\n      const targetRow = rawRows[getRawRowIdx(rowIdx)];\n  \n      const updatedTargetRow = onPaste({\n        sourceRow: copiedCell.row,\n        sourceColumnKey: copiedCell.columnKey,\n        targetRow,\n        targetColumnKey: targetColumn.key\n      });\n  \n      updateRow(targetColumn, rowIdx, updatedTargetRow);\n\n    }\n\n   \n  }\n\n  function handleCellInput(event: React.KeyboardEvent<HTMLDivElement>) {\n    if (!selectedCellIsWithinViewportBounds) return;\n    const row = rows[selectedPosition.rowIdx];\n    if (isGroupRow(row)) return;\n    const { key, shiftKey } = event;\n\n    // Select the row on Shift + Space\n    if (isSelectable && shiftKey && key === ' ') {\n      assertIsValidKeyGetter<R, K>(rowKeyGetter);\n      const rowKey = rowKeyGetter(row);\n      selectRow({ row, checked: !selectedRows.has(rowKey), isShiftClick: false });\n      // do not scroll\n      event.preventDefault();\n      return;\n    }\n\n    const column = columns[selectedPosition.idx];\n    column.editorOptions?.onCellKeyDown?.(event);\n    if (event.isDefaultPrevented()) return;\n\n    if (isCellEditable(selectedPosition) && isDefaultCellInput(event)) {\n      setSelectedPosition(({ idx, rowIdx }) => ({\n        idx,\n        rowIdx,\n        mode: 'EDIT',\n        row,\n        originalRow: row\n      }));\n\n    \n    }\n  }\n\n  /**\n   * utils\n   */\n  function isColIdxWithinSelectionBounds(idx: number) {\n    return idx >= minColIdx && idx <= maxColIdx;\n  }\n\n  function isRowIdxWithinViewportBounds(rowIdx: number) {\n    return rowIdx >= 0 && rowIdx < rows.length;\n  }\n\n  function isCellWithinSelectionBounds({ idx, rowIdx }: Position): boolean {\n    return rowIdx >= minRowIdx && rowIdx <= maxRowIdx && isColIdxWithinSelectionBounds(idx);\n  }\n\n  function isCellWithinViewportBounds({ idx, rowIdx }: Position): boolean {\n    return isRowIdxWithinViewportBounds(rowIdx) && isColIdxWithinSelectionBounds(idx);\n  }\n\n  function isCellEditable(position: Position): boolean {\n    return (\n      isCellWithinViewportBounds(position) &&\n      isSelectedCellEditable({ columns, rows, selectedPosition: position, isGroupRow })\n    );\n  }\n  function deselectCell(): void {\n    setSelectedPosition(initialPosition);\n  }\n\n  function selectCell(position: Position, enableEditor?: Maybe<boolean>): void {\n    if (!isCellWithinSelectionBounds(position)) return;\n    commitEditorChanges();\n   \n    if (enableEditor && isCellEditable(position)) {\n      const row = rows[position.rowIdx] as R;\n      setSelectedPosition({ ...position, mode: 'EDIT', row, originalRow: row });\n      setSelectedRange({\n        startColumnIdx: position.idx,\n        startRowIdx: position.rowIdx,\n        endColumnIdx: position.idx,\n        endRowIdx: position.rowIdx\n      })\n    } else if (isSamePosition(selectedPosition, position)) {\n      // Avoid re-renders if the selected cell state is the same\n      scrollIntoView(getCellToScroll(gridRef.current!));\n    } else {\n      shouldFocusCellRef.current = true;\n      setSelectedPosition({ ...position, mode: 'SELECT' });\n      setSelectedRange({\n        startColumnIdx: position.idx,\n        startRowIdx: position.rowIdx,\n        endColumnIdx: position.idx,\n        endRowIdx: position.rowIdx\n      })\n    }\n   \n  }\n\n  function scrollToColumn(idx: number): void {\n    const { current } = gridRef;\n    if (!current) return;\n\n    if (idx > lastFrozenColumnIndex && idx < firstRightFrozenColumnIndex) {\n      const { rowIdx } = selectedPosition;\n      if (!isCellWithinSelectionBounds({ rowIdx, idx })) return;\n      const { clientWidth } = current;\n      const column = columns[idx];\n      const { left, width } = columnMetrics.get(column)!;\n      let right = left + width;\n\n      const colSpan = getSelectedCellColSpan({\n        rows,\n        topSummaryRows,\n        bottomSummaryRows,\n        rowIdx,\n        mainHeaderRowIdx,\n        lastFrozenColumnIndex,\n        column,\n        isGroupRow\n      });\n\n      if (colSpan !== undefined) {\n        const { left, width } = columnMetrics.get(columns[column.idx + colSpan - 1])!;\n        right = left + width;\n      }\n\n      const isCellAtLeftBoundary = left < scrollLeft + totalFrozenColumnWidth;\n      const isCellAtRightBoundary = right > clientWidth + scrollLeft-totalRightFrozenColumnWidth; //subtract totalRightFrozenColumnWidth\n      const sign = isRtl ? -1 : 1;\n      if (isCellAtLeftBoundary) {\n        current.scrollLeft = (left - totalFrozenColumnWidth) * sign;\n      } else if (isCellAtRightBoundary) {\n        current.scrollLeft = (right - clientWidth+ totalRightFrozenColumnWidth) * sign;\n      }\n    }\n  }\n\n  function getNextPosition(key: string, ctrlKey: boolean, shiftKey: boolean): Position {\n    const { idx, rowIdx } = selectedPosition;\n    const row = rows[rowIdx];\n    const isRowSelected = selectedCellIsWithinSelectionBounds && idx === -1;\n\n    // If a group row is focused, and it is collapsed, move to the parent group row (if there is one).\n    if (key === leftKey && isRowSelected && isGroupRow(row) && !row.isExpanded && row.level !== 0) {\n      let parentRowIdx = -1;\n      for (let i = selectedPosition.rowIdx - 1; i >= 0; i--) {\n        const parentRow = rows[i];\n        if (isGroupRow(parentRow) && parentRow.id === row.parentId) {\n          parentRowIdx = i;\n          break;\n        }\n      }\n      if (parentRowIdx !== -1) {\n        return { idx, rowIdx: parentRowIdx };\n      }\n    }\n\n    switch (key) {\n      case 'ArrowUp':\n        return { idx, rowIdx: rowIdx - 1 };\n      case 'ArrowDown':\n        return { idx, rowIdx: rowIdx + 1 };\n      case leftKey:\n        return { idx: idx - 1, rowIdx };\n      case rightKey:\n        return { idx: idx + 1, rowIdx };\n      case 'Tab':\n        return { idx: idx + (shiftKey ? -1 : 1), rowIdx };\n      case 'Home':\n        // If row is selected then move focus to the first row\n        if (isRowSelected) return { idx, rowIdx: 0 };\n        return { idx: 0, rowIdx: ctrlKey ? minRowIdx : rowIdx };\n      case 'End':\n        // If row is selected then move focus to the last row.\n        if (isRowSelected) return { idx, rowIdx: rows.length - 1 };\n        return { idx: maxColIdx, rowIdx: ctrlKey ? maxRowIdx : rowIdx };\n      case 'PageUp': {\n        if (selectedPosition.rowIdx === minRowIdx) return selectedPosition;\n        const nextRowY = getRowTop(rowIdx) + getRowHeight(rowIdx) - clientHeight;\n        return { idx, rowIdx: nextRowY > 0 ? findRowIdx(nextRowY) : 0 };\n      }\n      case 'PageDown': {\n        if (selectedPosition.rowIdx >= rows.length) return selectedPosition;\n        const nextRowY = getRowTop(rowIdx) + clientHeight;\n        return { idx, rowIdx: nextRowY < totalRowHeight ? findRowIdx(nextRowY) : rows.length - 1 };\n      }\n      default:\n        return selectedPosition;\n    }\n  }\n\n  function navigate(event: React.KeyboardEvent<HTMLDivElement>) {\n    const { key, shiftKey } = event;\n    let mode = cellNavigationMode;\n    if (key === 'Tab') {\n      if (\n        canExitGrid({\n          shiftKey,\n          cellNavigationMode,\n          maxColIdx,\n          minRowIdx,\n          maxRowIdx,\n          selectedPosition\n        })\n      ) {\n        setSelectedRange(initialSelectedRange);\n        commitEditorChanges();\n        // Allow focus to leave the grid so the next control in the tab order can be focused\n        return;\n      }\n\n      mode = cellNavigationMode === 'NONE' ? 'CHANGE_ROW' : cellNavigationMode;\n    }\n\n    // Do not allow focus to leave\n    event.preventDefault();\n\n    const ctrlKey = isCtrlKeyHeldDown(event);\n    const nextPosition = getNextPosition(key, ctrlKey, shiftKey);\n    if (isSamePosition(selectedPosition, nextPosition)) return;\n\n    const nextSelectedCellPosition = getNextSelectedCellPosition({\n      moveUp: key === 'ArrowUp',\n      moveNext: key === rightKey || (key === 'Tab' && !shiftKey),\n      columns,\n      colSpanColumns,\n      rows,\n      topSummaryRows,\n      bottomSummaryRows,\n      minRowIdx,\n      mainHeaderRowIdx,\n      maxRowIdx,\n      lastFrozenColumnIndex,\n      cellNavigationMode: mode,\n      currentPosition: selectedPosition,\n      nextPosition,\n      isCellWithinBounds: isCellWithinSelectionBounds,\n      isGroupRow\n    });\n\n    selectCell(nextSelectedCellPosition);\n  }\n\n  function getDraggedOverCellIdx(currentRowIdx: number): number | undefined {\n    if (draggedOverRowIdx === undefined) return;\n    const { rowIdx } = selectedPosition;\n\n    const isDraggedOver =\n      rowIdx < draggedOverRowIdx\n        ? rowIdx < currentRowIdx && currentRowIdx <= draggedOverRowIdx\n        : rowIdx > currentRowIdx && currentRowIdx >= draggedOverRowIdx;\n\n    return isDraggedOver ? selectedPosition.idx : undefined;\n  }\n\n  \n\n  function getDragHandle(rowIdx: number) {\n    if (\n      selectedPosition.rowIdx !== rowIdx ||\n      selectedPosition.mode === 'EDIT' ||\n      hasGroups || // drag fill is not supported when grouping is enabled\n      onFill == null\n    ) {\n      return;\n    }\n\n    return (\n      <DragHandle\n        rows={rawRows}\n        columns={columns}\n        selectedPosition={selectedPosition}\n        isCellEditable={isCellEditable}\n        latestDraggedOverRowIdx={latestDraggedOverRowIdx}\n        onRowsChange={onRowsChange}\n        onFill={onFill}\n        setDragging={setDragging}\n        setDraggedOverRowIdx={setDraggedOverRowIdx}\n      />\n    );\n  }\n\n  function getCellEditor(rowIdx: number) {\n    if (selectedPosition.rowIdx !== rowIdx || selectedPosition.mode === 'SELECT') return;\n\n    const { idx, row } = selectedPosition;\n    const column = columns[idx];\n    const colSpan = getColSpan(column, lastFrozenColumnIndex,{ type: 'ROW', row });\n\n    const closeEditor = (shouldFocusCell: boolean) => {\n      shouldFocusCellRef.current = shouldFocusCell;\n      setSelectedPosition(({ idx, rowIdx }) => ({ idx, rowIdx, mode: 'SELECT' }));\n    };\n\n    const onRowChange = (row: R, commitChanges: boolean , shouldFocusCell : boolean) => {\n      if (commitChanges) {\n        updateRow(column, selectedPosition.rowIdx, row);\n        closeEditor(shouldFocusCell);\n      } else {\n        setSelectedPosition((position) => ({ ...position, row }));\n      }\n    };\n\n    if (rows[selectedPosition.rowIdx] !== selectedPosition.originalRow) {\n      // Discard changes if rows are updated from outside\n      closeEditor(false);\n    }\n\n    return (\n      <EditCell\n        key={column.key}\n        column={column}\n        colSpan={colSpan}\n        row={row}\n        onRowChange={onRowChange}\n        closeEditor={closeEditor}\n      />\n    );\n  }\n\n  function getRowViewportColumns(rowIdx: number) {\n    const selectedColumn = columns[selectedPosition.idx];\n    if (\n      // idx can be -1 if grouping is enabled\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n      selectedColumn !== undefined &&\n      selectedPosition.rowIdx === rowIdx &&\n      !viewportColumns.includes(selectedColumn)\n    ) {\n      // Add the selected column to viewport columns if the cell is not within the viewport\n      return selectedPosition.idx > colOverscanEndIdx\n        ? [...viewportColumns]\n        : [\n            ...viewportColumns.slice(0, lastFrozenColumnIndex + 1),\n            selectedColumn,\n            ...viewportColumns.slice(lastFrozenColumnIndex + 1)\n          ];\n    }\n    return viewportColumns;\n  }\n\n  function getViewportRows() {\n    const rowElements: React.ReactNode[] = [];\n    let startRowIndex = 0;\n\n    const { idx: selectedIdx, rowIdx: selectedRowIdx } = selectedPosition;\n\n    const startRowIdx =\n      selectedCellIsWithinViewportBounds && selectedRowIdx < rowOverscanStartIdx\n        ? rowOverscanStartIdx - 1\n        : rowOverscanStartIdx;\n    const endRowIdx =\n      selectedCellIsWithinViewportBounds && selectedRowIdx > rowOverscanEndIdx\n        ? rowOverscanEndIdx + 1\n        : rowOverscanEndIdx;\n\n    for (let viewportRowIdx = startRowIdx; viewportRowIdx <= endRowIdx; viewportRowIdx++) {\n      const isRowOutsideViewport =\n        viewportRowIdx === rowOverscanStartIdx - 1 || viewportRowIdx === rowOverscanEndIdx + 1;\n      const rowIdx = isRowOutsideViewport ? selectedRowIdx : viewportRowIdx;\n\n      let rowColumns = viewportColumns;\n      const selectedColumn = columns[selectedIdx];\n      // selectedIdx can be -1 if grouping is enabled\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n      if (selectedColumn !== undefined) {\n        if (isRowOutsideViewport) {\n          // if the row is outside the viewport then only render the selected cell\n          rowColumns = [selectedColumn];\n        } else {\n          // if the row is within the viewport and cell is not, add the selected column to viewport columns\n          rowColumns = getRowViewportColumns(rowIdx);\n        }\n      }\n\n      const row = rows[rowIdx];\n      const gridRowStart = headerAndTopSummaryRowsCount + rowIdx + 1;\n      if (isGroupRow(row)) {\n        ({ startRowIndex } = row);\n        const isGroupRowSelected =\n          isSelectable && row.childRows.every((cr) => selectedRows.has(rowKeyGetter!(cr)));\n        rowElements.push(\n          <GroupRowRenderer\n            aria-level={row.level + 1} // aria-level is 1-based\n            aria-setsize={row.setSize}\n            aria-posinset={row.posInSet + 1} // aria-posinset is 1-based\n            aria-rowindex={headerAndTopSummaryRowsCount + startRowIndex + 1} // aria-rowindex is 1 based\n            aria-selected={isSelectable ? isGroupRowSelected : undefined}\n            key={row.id}\n            id={row.id}\n            groupKey={row.groupKey}\n            viewportColumns={rowColumns}\n            childRows={row.childRows}\n            rowIdx={rowIdx}\n            row={row}\n            gridRowStart={gridRowStart}\n            height={getRowHeight(rowIdx)}\n            level={row.level}\n            isExpanded={row.isExpanded}\n            selectedCellIdx={selectedRowIdx === rowIdx ? selectedIdx : undefined}\n            isRowSelected={isGroupRowSelected}\n            selectGroup={selectGroupLatest}\n            toggleGroup={toggleGroupLatest}\n            groupClassName ={parentRowGroupClassFunction ?? undefined}\n          />\n        );\n        continue;\n      }\n\n      startRowIndex++;\n      let key;\n      let isRowSelected = false;\n      if (typeof rowKeyGetter === 'function') {\n        key = rowKeyGetter(row);\n        isRowSelected = selectedRows?.has(key) ?? false;\n      } else {\n        key = hasGroups ? startRowIndex : rowIdx;\n      }\n\n      rowElements.push(\n        rowRenderer(key, {\n          // aria-rowindex is 1 based\n          'aria-rowindex':\n          headerAndTopSummaryRowsCount + (hasGroups ? startRowIndex : rowIdx) + 1,\n          'aria-selected': isSelectable ? isRowSelected : undefined,\n          rowIdx,\n          row,\n          viewportColumns: rowColumns,\n          isRowSelected,\n          onRowClick,\n          onRowDoubleClick,\n          rowClass,\n          gridRowStart,\n          height: getRowHeight(rowIdx),\n          copiedCellIdx:\n            copiedCell !== null && copiedCell.row === row\n              ? columns.findIndex((c) => c.key === copiedCell.columnKey)\n              : undefined,\n          selectedCellIdx: selectedRowIdx === rowIdx ? selectedIdx : undefined,\n          selectedCellsRange: enableRangeSelection && isValueInBetween(rowIdx, selectedRange?.startRowIdx, selectedRange?.endRowIdx) ? {\n            startIdx: selectedRange.startColumnIdx,\n            endIdx: selectedRange.endColumnIdx\n          } : {startIdx: -1, endIdx: -1}\n          ,\n          draggedOverCellIdx: getDraggedOverCellIdx(rowIdx),\n          setDraggedOverRowIdx: isDragging ? setDraggedOverRowIdx : undefined,\n          lastFrozenColumnIndex,\n          onRowChange: handleFormatterRowChangeLatest,\n          selectCell: selectViewportCellLatest,\n          rangeSelectionMode : enableRangeSelection ?? false ,\n          selectedCellDragHandle: getDragHandle(rowIdx),\n          selectedCellEditor: getCellEditor(rowIdx),\n          onCellMouseDown: () => {},\n          onCellMouseUp: () =>{},\n          onCellMouseEnter : (columnIdx: number) => {\n           /*  if (isMouseRangeSelectionMode && enableRangeSelection) {\n              setSelectedRange({...selectedRange, endRowIdx: rowIdx, endColumnIdx: columnIdx})\n            } */\n          }\n        })\n      );\n    }\n\n    return rowElements;\n  }\n\n  // Reset the positions if the current values are no longer valid. This can happen if a column or row is removed\n  if (selectedPosition.idx > maxColIdx || selectedPosition.rowIdx > maxRowIdx) {\n    setSelectedPosition(initialPosition);\n    setDraggedOverRowIdx(undefined);\n    setSelectedRange(initialSelectedRange)\n  }\n\n\n  return (\n    <div\n      role={hasGroups ? 'treegrid' : 'grid'}\n      aria-label={ariaLabel}\n      aria-labelledby={ariaLabelledBy}\n      aria-describedby={ariaDescribedBy}\n      aria-multiselectable={isSelectable ? true : undefined}\n      aria-colcount={columns.length}\n      aria-rowcount={headerRowsCount + rowsCount + summaryRowsCount}\n      className={clsx(\n        rootClassname,\n        {\n          [viewportDraggingClassname]: isDragging\n        },\n        className\n      )}\n      style={\n        {\n          ...style,\n          // set scrollPadding to correctly position non-sticky cells after scrolling\n          scrollPaddingInlineStart:\n            selectedPosition.idx > lastFrozenColumnIndex || scrollToPosition?.idx !== undefined\n              ? `${totalFrozenColumnWidth}px`\n              : undefined,\n          scrollPaddingInlineEnd : selectedPosition.idx < firstRightFrozenColumnIndex  ? `${totalRightFrozenColumnWidth}px` : undefined,\n          scrollPaddingBlock:\n          isRowIdxWithinViewportBounds(selectedPosition.rowIdx) ||  scrollToPosition?.rowIdx !== undefined\n              ? `${headerRowsHeight + topSummaryRowsCount * summaryRowHeight}px ${\n                  bottomSummaryRowsCount * summaryRowHeight\n                }px`\n              : undefined,\n            gridTemplateColumns,\n\n          '--rdg-header-row-height': `${headerRowHeight}px`,\n          '--rdg-summary-row-height': `${summaryRowHeight}px`,\n          '--rdg-sign': isRtl ? -1 : 1,\n          ...layoutCssVars\n        } as unknown as React.CSSProperties\n      }\n      dir={direction}\n      ref={gridRef}\n      onScroll={handleScroll}\n      onKeyDown={handleKeyDown}\n      data-testid={testId}\n    >\n      {/* extra div is needed for row navigation in a treegrid */}\n       {/* {hasGroups && (\n        <div\n          ref={rowRef}\n          tabIndex={isGroupRowFocused ? 0 : -1}\n          className={clsx(focusSinkClassname, {\n            [rowSelected]: isGroupRowFocused,\n            [rowSelectedWithFrozenCell]: isGroupRowFocused && (lastFrozenColumnIndex !== -1 || firstRightFrozenColumnIndex != -1)\n          })} \n          style={{\n           gridRowStart: selectedPosition.rowIdx + 1+ topSummaryRowsCount+headerRowsCount\n          }}\n          onKeyDown={handleKeyDown}\n        />\n      )}  */}\n      {scrollToPosition !== null && (\n        <ScrollToCell\n          scrollToPosition={scrollToPosition}\n          setScrollToCellPosition={setScrollToPosition}\n          gridElement={gridRef.current!}\n        />\n      )}\n      <DataGridDefaultComponentsProvider value={defaultGridComponents}>\n        {Array.from({ length: groupedColumnHeaderRowsCount }, (_, index) => (\n              <GroupedColumnHeaderRow\n                key={index}\n                rowIdx={index + 1}\n                level={-groupedColumnHeaderRowsCount + index}\n                columns={getRowViewportColumns(minRowIdx + index)}\n                selectedCellIdx={\n                  selectedPosition.rowIdx === minRowIdx + index ? selectedPosition.idx : undefined\n                }\n                selectCell={selectHeaderCellLatest}\n              />\n            ))}\n        <HeaderRow\n          rowIdx={headerRowsCount}\n          columns={getRowViewportColumns(mainHeaderRowIdx)}\n          onColumnResize={handleColumnResize}\n          allRowsSelected={allRowsSelected}\n          onAllRowsSelectionChange={selectAllRowsLatest}\n          sortColumns={sortColumns}\n          onSortColumnsChange={onSortColumnsChange}\n          lastFrozenColumnIndex={lastFrozenColumnIndex}\n          selectedCellIdx={selectedPosition.rowIdx === mainHeaderRowIdx ? selectedPosition.idx : undefined}\n          selectCell={selectHeaderCellLatest}\n          shouldFocusGrid={!selectedCellIsWithinSelectionBounds}\n          direction={direction}\n        />\n       \n        {  \n          <>\n              {topSummaryRows?.map((row, rowIdx) => {\n                const gridRowStart = headerRowsCount + 1 + rowIdx;\n                const summaryRowIdx = mainHeaderRowIdx + 1 + rowIdx;\n                const isSummaryRowSelected = selectedPosition.rowIdx === summaryRowIdx;\n                const top = headerRowsHeight + summaryRowHeight * rowIdx;\n\n                return (\n                  <SummaryRow\n                    aria-rowindex={gridRowStart}\n                    key={rowIdx}\n                    rowIdx={summaryRowIdx}\n                    gridRowStart={gridRowStart}\n                    row={row}\n                    top={top}\n                    bottom={undefined}\n                    lastTopRowIdx={topSummaryRowsCount - 1}\n                    viewportColumns={getRowViewportColumns(summaryRowIdx)}\n                    lastFrozenColumnIndex={lastFrozenColumnIndex}\n                    selectedCellIdx={isSummaryRowSelected ? selectedPosition.idx : undefined}\n                    selectCell={(summaryRow: SR, column: CalculatedColumn<R, SR>) => {\n                      selectCell({ rowIdx: summaryRowIdx, idx: column.idx });\n                    }}\n                  />\n                );\n              })}\n\n             { (rows.length == 0 && noRowsFallback) ? noRowsFallback :\n             \n                  <>\n                    <div style={{gridColumn: '1/-1', height:topFillerHeight}} /> \n                    <RowSelectionChangeProvider value={selectRowLatest}>\n                      {getViewportRows()}\n                    </RowSelectionChangeProvider>\n                    <div style={{gridColumn: '1/-1', height:bottomFillerHeight}} />\n                    </>\n              } \n\n              {bottomSummaryRows?.map((row, rowIdx) => {\n                const gridRowStart = headerRowsCount + topSummaryRowsCount  + rows.length + rowIdx + 1;\n                const summaryRowIdx = rows.length + rowIdx;\n                const isSummaryRowSelected = selectedPosition.rowIdx === summaryRowIdx;\n                const top =\n                  clientHeight > totalRowHeight\n                    ? gridHeight - summaryRowHeight * (bottomSummaryRows.length - rowIdx)\n                    : undefined;\n                const bottom =\n                  top === undefined\n                    ? summaryRowHeight * (bottomSummaryRows.length - 1 - rowIdx)\n                    : undefined;\n\n                return (\n                  <SummaryRow\n                    aria-rowindex={headerRowsCount + topSummaryRowsCount + rowsCount + rowIdx + 1}\n                    key={rowIdx}\n                    rowIdx={summaryRowIdx}\n                    gridRowStart={gridRowStart}\n                    row={row}\n                    top={top}\n                    bottom={bottom}\n                    lastTopRowIdx={undefined}\n                    viewportColumns={getRowViewportColumns(summaryRowIdx)}\n                    lastFrozenColumnIndex={lastFrozenColumnIndex}\n                    selectedCellIdx={isSummaryRowSelected ? selectedPosition.idx : undefined}\n                    selectCell={(summaryRow: SR, column: CalculatedColumn<R, SR>) => {\n                      selectCell({ rowIdx: summaryRowIdx , idx: column.idx });\n                    }}\n                  />\n                );\n              })}\n\n            </>\n          }\n          {renderMeasuringCells({ viewportColumns })}\n\n      </DataGridDefaultComponentsProvider>\n    </div>\n  );\n}\n\nlet getCellToScrollExpression: XPathExpression | undefined;\n\nfunction getCellToScroll(gridEl: HTMLDivElement) {\n  getCellToScrollExpression ??= document.createExpression('div[@role=\"row\"]/div[@tabindex=\"0\"]');\n  // XPathResult.ANY_UNORDERED_NODE_TYPE === 8\n  return getCellToScrollExpression.evaluate(gridEl, 8).singleNodeValue as HTMLDivElement | null;\n}\n\nfunction isSamePosition(p1: Position, p2: Position) {\n  return p1.idx === p2.idx && p1.rowIdx === p2.rowIdx;\n}\n\nexport default forwardRef(DataGrid) as <R, SR = unknown, K extends Key = Key>(\n  props: DataGridProps<R, SR, K> & RefAttributes<DataGridHandle>\n) => JSX.Element;\n","import { css } from '@linaria/core';\nimport type { EditorProps } from '../types';\n\nexport const textEditorInternalClassname = css`\n  appearance: none;\n\n  box-sizing: border-box;\n  inline-size: 100%;\n  block-size: 100%;\n  padding-block: 0;\n  padding-inline: 6px;\n  border: 2px solid #ccc;\n  vertical-align: top;\n  color: var(--rdg-color);\n  background-color: var(--rdg-background-color);\n\n  font-family: inherit;\n  font-size: var(--rdg-font-size);\n\n  &:focus {\n    border-color: var(--rdg-selection-color);\n    outline: none;\n  }\n\n  &::placeholder {\n    color: #999;\n    opacity: 1;\n  }\n`;\n\nexport const textEditorClassname = `rdg-text-editor ${textEditorInternalClassname}`;\n\nfunction autoFocusAndSelect(input: HTMLInputElement | null) {\n  input?.focus();\n  input?.select();\n}\n\nexport default function textEditor<TRow, TSummaryRow>({\n  row,\n  column,\n  onRowChange,\n  onClose\n}: EditorProps<TRow, TSummaryRow>) {\n  return (\n    <input\n      className={textEditorClassname}\n      ref={autoFocusAndSelect}\n      value={row[column.key as keyof TRow] as unknown as string}\n      onChange={(event) => onRowChange({ ...row, [column.key]: event.target.value })}\n      onBlur={() => onClose(true,false)}\n    />\n  );\n}\n"],"names":["cell","cellClassname","cellFrozen","cellFrozenClassname","cellFrozenLast","rightCellFrozenFirst","cellFrozenLastClassname","rightCellFrozenFirstClassname","root","rootClassname","viewportDragging","viewportDraggingClassname","row","rowClassname","rowSelectedClassname","checkboxLabel","checkboxLabelClassname","checkboxInput","checkboxInputClassname","checkbox","checkboxClassname","checkboxLabelDisabled","checkboxLabelDisabledClassname","checkboxFormatter","onChange","props","handleChange","e","target","checked","nativeEvent","shiftKey","_jsxs","className","clsx","disabled","children","_jsx","type","DataGridDefaultComponentsContext","createContext","undefined","DataGridDefaultComponentsProvider","Provider","useDefaultComponents","useContext","SelectCellFormatter","value","isCellSelected","ariaLabel","ariaLabelledBy","_Fragment","tabIndex","valueFormatter","column","key","defaultColumnValue","groupCellContent","groupCellContentClassname","caret","caretClassname","toggleGroupFormatter","ToggleGroup","groupKey","isExpanded","toggleGroup","handleKeyDown","d","onKeyDown","viewBox","width","height","RowSelectionContext","RowSelectionProvider","RowSelectionChangeContext","RowSelectionChangeProvider","useRowSelection","rowSelectionContext","rowSelectionChangeContext","Error","SELECT_COLUMN_KEY","SelectFormatter","isRowSelected","onRowSelectionChange","isShiftClick","SelectGroupFormatter","SelectColumn","name","minWidth","maxWidth","resizable","sortable","frozen","headerRenderer","allRowsSelected","onAllRowsSelectionChange","formatter","groupFormatter","getColSpan","lastFrozenColumnIndex","args","colSpan","Number","isInteger","idx","scrollIntoView","element","inline","block","nonInputKeys","Set","isCtrlKeyHeldDown","ctrlKey","metaKey","isDefaultCellInput","event","has","onEditorNavigation","isSelectedCellEditable","selectedPosition","columns","rows","isGroupRow","rowIdx","isCellEditable","editor","rowGroup","editable","getSelectedCellColSpan","topSummaryRows","bottomSummaryRows","mainHeaderRowIdx","topSummaryRowsCount","length","getNextSelectedCellPosition","moveUp","moveNext","cellNavigationMode","colSpanColumns","minRowIdx","maxRowIdx","currentPosition","currentIdx","currentRowIdx","nextPosition","isCellWithinBounds","nextIdx","nextRowIdx","columnsCount","setColSpan","colIdx","getParentRowIdx","parent","level","setHeaderGroupColAndRowSpan","nextColumn","parentRowIdx","found","isAfterLastColumn","isBeforeFirstColumn","isLastRow","isFirstRow","nextParentRowIdx","canExitGrid","maxColIdx","atLastCellInRow","atFirstCellInRow","atLastRow","atFirstRow","getRowStyle","getHeaderCellStyle","rowSpan","gridRowEnd","paddingBlockStart","insetBlockStart","gridRowStart","getCellStyle","index","gridColumnStart","gridColumnEnd","insetInlineStart","frozenColumnPosition","insetInlineEnd","getSummaryCellStyle","getCellClassname","extraClasses","isLastFrozenColumn","isFirstFrozenRightColumn","measuringCellClassname","renderMeasuringCells","viewportColumns","map","style","min","max","round","floor","sign","abs","ceil","Math","getHeaderCellRowSpan","assertIsValidKeyGetter","keyGetter","clampColumnWidth","DEFAULT_COLUMN_WIDTH","DEFAULT_COLUMN_MIN_WIDTH","useCalculatedColumns","rawColumns","measuredColumnWidths","resizedColumnWidths","viewportWidth","scrollLeft","defaultColumnOptions","rawGroupBy","enableVirtualization","defaultWidth","defaultMinWidth","defaultMaxWidth","defaultFormatter","defaultSortable","defaultResizable","defaultFrozenColumnPostion","firstRightFrozenColumnIndex","groupBy","headerRowsCount","useMemo","totalRightFrozenColumns","collectColumns","rawColumn","calculatedColumnParent","headerCellClass","includes","push","sort","aKey","frozenA","frozenColumnPositionA","bKey","frozenB","frozenColumnPositionB","indexOf","forEach","updateColumnParent","templateColumns","layoutCssVars","totalFrozenColumnWidth","totalRightFrozenColumnWidth","columnMetrics","Map","left","get","set","columnMetric","i","colOverscanStartIdx","colOverscanEndIdx","lastColIdx","viewportLeft","viewportRight","firstUnfrozenColumnIdx","colVisibleStartIdx","colVisibleEndIdx","useLayoutEffect","window","useEffect","useOriginalLayoutEffect","useFocusRef","isSelected","ref","useRef","current","focus","preventScroll","useGridDimensions","gridRef","inlineSize","setInlineSize","useState","blockSize","setBlockSize","ResizeObserver","clientWidth","clientHeight","offsetWidth","offsetHeight","getBoundingClientRect","initialWidth","initialHeight","resizeObserver","entries","size","contentBoxSize","flushSync","observe","disconnect","useLatestFunc","fn","useCallback","useRovingCellRef","isChildFocused","setIsChildFocused","onFocus","currentTarget","isFocused","useViewportColumns","rowOverscanStartIdx","rowOverscanEndIdx","startIdx","updateStartIdx","isReadonlyArray","arr","Array","isArray","useViewportRows","rawRows","rowHeight","scrollTop","rowGrouper","expandedGroupIds","groupedRows","rowsCount","groupRows","groupByKey","remainingGroupByKeys","startRowIndex","groupRowsCount","groups","rowInfo","childRows","Object","childGroups","childRowsCount","allGroupRows","flattenedRows","expandGroup","parentId","keys","posInSet","id","toString","groupRow","setSize","add","totalRowHeight","getRowTop","getRowHeight","findRowIdx","offset","rowPositions","currentRowHeight","position","top","validateRowIdx","start","end","middle","currentOffset","topFillerHeight","bottomFillerHeight","overscanThreshold","rowVisibleStartIdx","rowVisibleEndIdx","useColumnWidths","gridWidth","setResizedColumnWidths","setMeasuredColumnWidths","onColumnResize","prevGridWidthRef","columnsCanFlex","ignorePreviouslyMeasuredColumns","newTemplateColumns","columnsToMeasure","gridTemplateColumns","join","updateMeasuredWidths","newMeasuredColumnWidths","hasChanges","measuredWidth","measureColumnWidth","delete","handleColumnResize","nextWidth","resizingKey","newResizedColumnWidths","selector","CSS","escape","measuringCell","querySelector","ScrollToCell","scrollToPosition","gridElement","setScrollToCellPosition","removeScrollToCell","observer","IntersectionObserver","threshold","gridColumn","gridRow","headerSortCell","headerSortCellClassname","headerSortName","headerSortNameClassname","sortDirection","priority","onSort","SortableHeaderCell","sortIcon","preventDefault","handleClick","onClick","cellResizable","frozenRightCellResizable","cellResizableClassname","frozenRightResizableClassname","HeaderCell","sortColumns","onSortColumnsChange","selectCell","shouldFocusGrid","direction","isRtl","sortIndex","findIndex","columnKey","sortColumn","ariaSort","defaultHeaderRenderer","onPointerDown","pointerType","buttons","pointerId","right","clientX","onPointerMove","onLostPointerCapture","removeEventListener","setPointerCapture","addEventListener","ctrlClick","sortDescendingFirst","nextSort","nextSortColumn","nextSortColumns","splice","onDoubleClick","handleFocus","role","headerRow","headerRowClassname","HeaderRow","selectedCellIdx","cells","memo","cellCopied","cellCopiedClassname","cellDraggedOver","cellDraggedOverClassname","Cell","isCopied","isDraggedOver","dragHandle","onRowClick","onRowDoubleClick","onRowChange","rangeSelectionMode","cellClass","onMouseDown","selectCellWrapper","openEditor","editorOptions","editOnClick","handleContextMenu","handleDoubleClick","handleRowChange","newRow","handleOnFocus","editOnFocus","onContextMenu","isValueInBetween","num1","num2","Row","selectedCellsRange","copiedCellIdx","draggedOverCellIdx","selectedCellEditor","selectedCellDragHandle","rowClass","setDraggedOverRowIdx","onMouseEnter","onCellMouseDown","onCellMouseUp","onCellMouseEnter","handleDragEnter","endIdx","onMouseDownCapture","onMouseUpCapture","RowComponent","forwardRef","defaultRowRenderer","GroupCell","groupColumnIndex","toggleGroupWrapper","isLevelMatching","cursor","groupRowClassname","GroupedRow","selectGroup","groupClassName","handleSelectGroup","summaryCellClassname","SummaryCell","summaryCellClass","summaryFormatter","summaryRow","topSummaryRow","topSummaryRowBorderClassname","bottomSummaryRowBorderClassname","summaryRowClassname","topSummaryRowClassname","SummaryRow","bottom","lastTopRowIdx","ariaRowIndex","isTop","cellEditing","EditCell","closeEditor","frameRequestRef","commitOnOutsideClick","commitOnOutsideMouseDown","onClose","onWindowCaptureMouseDown","requestAnimationFrame","capture","cancelFrameRequest","cancelAnimationFrame","stopPropagation","onNavigation","commitChanges","shouldFocusCell","onEditorRowChange","commitChangesAndFocus","renderFormatter","cellDragHandle","cellDragHandleClassname","DragHandle","latestDraggedOverRowIdx","onRowsChange","onFill","setDragging","handleMouseDown","onMouseOver","onMouseUp","handleDragEnd","overRowIdx","endRowIndex","updateRows","startRowIdx","endRowIdx","sourceRow","updatedRows","indexes","updatedRow","targetRow","arrow","arrowClassname","useRovingTabIndex","isFocusable","childTabIndex","GroupedColumnHeaderCell","GroupedColumnHeaderRow","renderedParents","initialSelectedRange","startColumnIdx","endColumnIdx","initialPosition","mode","DataGrid","rowKeyGetter","headerRowHeight","rawHeaderRowHeight","summaryRowHeight","rawSummaryRowHeight","selectedRows","onSelectedRowsChange","onExpandedGroupIdsChange","onScroll","onCopy","onPaste","onMultiPaste","onMultiCopy","rawCellNavigationMode","enableRangeSelection","enableColumnVirtualization","renderers","parentRowGroupClass","ariaDescribedBy","testId","defaultComponents","parentRowGroupClassFunction","rowRenderer","defaultSortIcon","defaultCheckboxFormatter","noRowsFallback","setScrollTop","setScrollLeft","selectedRange","setSelectedRange","copiedRange","setCopiedRange","copiedCell","setCopiedCell","isDragging","draggedOverRowIdx","setOverRowIdx","setScrollToPosition","gridHeight","bottomSummaryRowsCount","summaryRowsCount","headerAndTopSummaryRowsCount","groupedColumnHeaderRowsCount","setSelectedPosition","prevSelectedPosition","lastSelectedRowIdx","shouldFocusCellRef","headerRowsHeight","isSelectable","leftKey","rightKey","defaultGridComponents","every","hasGroups","minColIdx","selectedCellIsWithinSelectionBounds","isCellWithinSelectionBounds","selectedCellIsWithinViewportBounds","isCellWithinViewportBounds","selectRowLatest","selectRow","selectAllRowsLatest","selectAllRows","handleFormatterRowChangeLatest","updateRow","selectViewportCellLatest","enableEditor","selectGroupLatest","selectHeaderCellLatest","toggleGroupLatest","isSamePosition","querySelectorAll","from","find","closest","elementToFocus","useImperativeHandle","scrollToColumn","scrollToRow","scrollTo","behavior","scrollToCell","scrollToIdx","scrollToRowIdx","isRowIdxWithinViewportBounds","deselectCell","getColumnIdx","getColumns","reCalculateColumnWidths","newSelectedRows","childRow","rowKey","previousRowIdx","step","expandedGroupId","newExpandedGroupIds","Element","isCellEvent","keyCode","cKey","vKey","handleCopy","handlePaste","scrollPostion","navigate","handleCellInput","handleScroll","getRawRowIdx","rawRowIdx","commitEditorChanges","cellsRange","sourceColumnKey","targetRange","targetColumn","updatedTargetRow","targetColumnKey","onCellKeyDown","isDefaultPrevented","originalRow","isColIdxWithinSelectionBounds","getCellToScroll","isCellAtLeftBoundary","isCellAtRightBoundary","getNextPosition","parentRow","nextRowY","nextSelectedCellPosition","getDraggedOverCellIdx","getDragHandle","getCellEditor","getRowViewportColumns","selectedColumn","slice","getViewportRows","rowElements","selectedIdx","selectedRowIdx","viewportRowIdx","isRowOutsideViewport","rowColumns","isGroupRowSelected","cr","GroupRowRenderer","c","columnIdx","scrollPaddingInlineStart","scrollPaddingInlineEnd","scrollPaddingBlock","dir","_","summaryRowIdx","isSummaryRowSelected","getCellToScrollExpression","gridEl","document","createExpression","evaluate","singleNodeValue","p1","p2","textEditorInternalClassname","textEditorClassname","autoFocusAndSelect","input","select","textEditor","onBlur"],"mappings":"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"}